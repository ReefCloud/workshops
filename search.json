[
  {
    "objectID": "10_git.html",
    "href": "10_git.html",
    "title": "Git and version control",
    "section": "",
    "text": "Other useful tutorials or resources\n\nhttps://git-scm.com/book/en/v2\nhttps://www.atlassian.com/git/tutorials\nhttps://marklodato.github.io/visual-git-guide/index-en.html\nhttps://git-scm.com/docs/gittutorial\nhttps://marklodato.github.io/visual-git-guide/index-en.html\nhttps://try.github.io/levels/1/challenges/1\nhttps://onlywei.github.io/explain-git-with-d3/\nhttp://git-school.github.io/visualizing-git/\nhttps://github.com/sensorflo/git-draw\n\n\nThis tutorial will take a modular approach. The first section will provide an overview of the basic concepts of git. The second section will provide a quick overview of basic usage and the third and final section will cover intermediate level usage. In an attempt to ease understanding, the tutorial will blend together git commands and output, schematic diagrams and commentary in an attempt to ease understanding.\nThe following table surves as both a key and overview of the most common actions and git ‘verbs’.\n\n\n\n\nInitialize git \n\n\ngit init\n\n\nEstablish a git repository (within the current path if no path provided)\n\n\n\n\nStaging \n\n\ngit add &lt;file&gt; where file is one or more files to stage\n\n\nStaging is indicating which files and their states are to be included in the next commit.\n\n\n\n\nCommitting \n\n\ngit commit -m \"&lt;Commit message&gt;\" where &lt;Commit message&gt; is a message to accompany the commit\n\n\nCommiting generates a ‘snapshot’ of the file system.\n\n\n\n\nCheckout \n\n\ngit checkout \"&lt;commit&gt;\" where &lt;commit&gt; is a reference to a commit to be reviewed\n\n\nExplore the state associated with a specific commit\n\n\n\n\nReset  \n\n\ngit reset --hard \"&lt;commit&gt;\" where &lt;commit&gt; is a reference to a commit\n\n\nReturn to a previous state, effectively erasing subsequent commits..\n\n\n\n\nRevert \n\n\ngit revert \"&lt;commit&gt;\" where &lt;commit&gt; is a reference to a commit that should be nullified (inverted)\n\n\nGenerate a new commit that reverses the changes introduced by a commit thereby effectively rolling back to a previous state (the one prior to the nominated commit) whilst still maintaining full commit history.\n\n\n\n\nBranching \n\n\ngit branch &lt;name&gt; git checkout &lt;name&gt; where &lt;name&gt; is a reference to a branch name (e.g. ‘Feature’)\n\n\nTake edits in the project in a new direction to allow for modifications that will not affect the main (master) branch.\n\n\n\n\nMerging \n\n\ngit checkout master git branch &lt;name&gt; where &lt;name&gt; is a reference to a branch name (e.g. ‘Feature’) that is to be merged back into master.\n\n\nIncorporate changes in a branch into another branch (typically master).\n\n\n\n\nRebasing \n\n\ngit rebase -i HEAD~&lt;number&gt; where &lt;number&gt; is the number of previous commits to squash together with head.\n\n\nCombine multiple commits together into a single larger commit.\n\n\n\n\nPulling \n\n\ngit pull -u &lt;remote&gt; &lt;branch&gt; where &lt;remote&gt; is the name of the remote (typically origin) and &lt;branch&gt; is the branch to sync with remote (typically master).\n\n\nPull changes from a branch of a remote repository.\n\n\n\n\nPushing \n\n\ngit push -u &lt;remote&gt; &lt;branch&gt; where &lt;remote&gt; is the name of the remote (typically origin) and &lt;branch&gt; is the branch to sync with remote (typically master).\n\n\nPush changes up to a branch of a remote repository."
  }
]