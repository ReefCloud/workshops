---
title: Git and version control
author: "Murray Logan"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    toc: true
    toc-float: true
    number-sections: true
    number-depth: 3
    embed-resources: true
    code-fold: false
    code-tools: true
    code-summary: "Show the code"
execute:
  keep-md: true
crossref:
  fig-title: '**Figure**'
  fig-labels: arabic
  tbl-title: '**Table**'
  tbl-labels: arabic
engine: knitr
bibliography: resources/references.bib
output_dir: "docs"
---

```{r setup, include=FALSE,warning=FALSE, message=FALSE}
knitr::opts_chunk$set(echo = TRUE,warning=FALSE, message=FALSE, cache = TRUE, comment = "")
options(tinytex.engine = 'xelatex')
cleanRmdInput <- function(x) {
#x <- gsub("```\\{r","```markdown\n`r ''```\\{r",x)
x <- gsub("^```$","`` `",x)  # the Makefile will then change this back to ``` after pandoc
x
}
library(tidyverse)
library(pander)
FIG_PATH <- '10_git_files/figure-html/'
```

::: {.newsbox}

**Other useful tutorials or resources**

- [https://git-scm.com/book/en/v2](https://git-scm.com/book/en/v2)
- [https://www.atlassian.com/git/tutorials](https://www.atlassian.com/git/tutorials)
- [https://marklodato.github.io/visual-git-guide/index-en.html](https://marklodato.github.io/visual-git-guide/index-en.html)
- [https://git-scm.com/docs/gittutorial](https://git-scm.com/docs/gittutorial)
- [https://marklodato.github.io/visual-git-guide/index-en.html](https://marklodato.github.io/visual-git-guide/index-en.html)
- [https://try.github.io/levels/1/challenges/1](https://try.github.io/levels/1/challenges/1)
- [https://onlywei.github.io/explain-git-with-d3/](https://onlywei.github.io/explain-git-with-d3/)
- [http://git-school.github.io/visualizing-git/](http://git-school.github.io/visualizing-git/)
- [https://github.com/sensorflo/git-draw](https://github.com/sensorflo/git-draw)
:::



This tutorial will take a modular approach. The first section will
provide an overview of the basic concepts of git. The second section
will provide a quick overview of basic usage and the third and final
section will cover intermediate level usage. In an attempt to ease
understanding, the tutorial will blend together git commands and
output, schematic diagrams and commentary in an attempt to ease
understanding.

The following table surves as both a key and overview of the most
common actions and git 'verbs'.

```{cat}
#| label: common
#| echo: true
#| eval: true
#| cache: true
#| engine.opts:
#|   file: "resources/common.tikz"

\tikzstyle{TARGET} = [font={\fontspec[Scale=2]{NotoSans-Regular}}]

\tikzstyle{hashText} = [font={\fontspec[Scale=1.5]{Inconsolata}}]
\tikzstyle{commentText} = [font={\fontspec[Scale=1.0]{Inconsolata}}]
\tikzstyle{refText} = [font={\fontspec[Scale=1.5]{Inconsolata}}]

\definecolor{color_branch}{rgb}{1,0.8,0.4}
\definecolor{color_head}{HTML}{6495ED} %
\definecolor{color_HEAD}{rgb}{0.26,0.65,0.91}
\definecolor{color_commit}{rgb}{0.9,0.9,0.2}
\definecolor{color_inactive}{rgb}{0.90,0.9,0.9}
\definecolor{color_detached}{rgb}{0.90,0.9,0.9}
\definecolor{color_derivative}{rgb}{0.12,0.6,0.51}
\definecolor{color_local}{rgb}{0.9,0.9,0.2}
\definecolor{color_remote}{rgb}{1,0.55,0.15}
 
% A template for making the storage symbol
\newcommand{\state}[3]{
\draw (#1) node [draw=none,fill=#2,shape=circle,minimum width=2cm] (#3) {
\begin{tikzpicture}
\node [draw=white, fill=white,shape=cylinder,shape aspect=1.3 ,shape border rotate=90,minimum height=1.6cm,minimum width=1.5cm] at (0,0) (Cylinder) {};
\draw[draw=#2,very thick,line width=0.1cm,anchor=north west] ($(Cylinder.north west) +(-0.05cm,-0.1cm)$) arc (-180:0:0.8cm and 0.2cm); 
\draw[draw=#2,very thick,line width=0.1cm,anchor=north west] ($(Cylinder.north west) +(-0.05cm,-0.5cm)$) arc (-180:0:0.8cm and 0.2cm); 
\draw[draw=#2,very thick,line width=0.1cm,anchor=north west] ($(Cylinder.north west) +(-0.05cm,-0.9cm)$) arc (-180:0:0.8cm and 0.2cm); 
\end{tikzpicture}
};
}

\newcommand{\commit}[5]{
\node [#1,inner sep=0,outer sep=0] (#2) {
\begin{tikzpicture}[#1]
\draw [#1] node [draw=black!40!#3,fill=#3,shape=circle,minimum width=1.0cm,line width=3pt] (x) {};
%\node [below,hashText] at (x.south) {#4};
\end{tikzpicture}
};
\ifx\notempty#4\empty
\node [below,hashText, minimum height = 0] at (#2.south) {#4};
\fi
\ifx\notempty#5\empty
\node [below,commentText,text=gray, minimum height = 0] at ($(#2.south) +(0,-0.5)$) {#5};
\fi
}

\newcommand{\rcommit}[5]{
\node [#1,inner sep=0,outer sep=0] (#2) {
\begin{tikzpicture}[#1]
\draw [#1] node [draw=black!40!#3,fill=#3,shape=rectangle,minimum width=1.0cm,minimum height=1.0cm,line width=3pt] (x) {};
%\node [below,hashText] at (x.south) {#4};
\end{tikzpicture}
};
\node [below,hashText] at (#2.south) {#4};
\node [below,commentText,text=gray] at ($(#2.south) +(0,-0.5)$) {#5};
}

\newcommand{\master}[1] {
\node [#1,rectangle,fill=color_branch,draw=black!20!color_branch,line width=2pt,refText,minimum height=0.8cm] (master) {main};
}
\newcommand{\rmaster}[1] {
\node [#1,rectangle,fill=color_branch,draw=black!20!color_branch,line width=2pt,refText,minimum height=0.8cm] (rmaster) {origin/main};
}
\newcommand{\branch}[2] {
\node [#1,rectangle,fill=color_branch,draw=black!20!color_branch,line width=2pt,refText,minimum height=0.8cm] (#2) {#2};
}

\newcommand{\HEAD}[1] {
\node [#1,rectangle,fill=color_HEAD,draw=black!20!color_HEAD,line width=2pt,refText,minimum height=0.8cm] (HEAD) {HEAD};
}
\newcommand{\rHEAD}[1] {
\node [#1,rectangle,fill=color_HEAD,draw=black!20!color_HEAD,line width=2pt,refText,minimum height=0.8cm] (rHEAD) {origin/HEAD};
}
```

```{tikz}
%| label: Fig0
%| engine: tikz
%| echo: false
%| cache: true
%| include: false
%| dependson: common
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"
\input{resources/common.tikz}
\begin{tikzpicture}%[every node/.style={inner sep=0,outer sep=0, minimum height = 0}]
\commit{}{A}{white}{}{}
\draw [-,line width=3pt,draw=black!60] (A) -- ++(-1,0);
\end{tikzpicture}
```
```{bash}
#| label: Fig0-conv
#| warning: false
#| message: false
#| include: false
#| echo: false
convert -trim +repage -density 300 -resize 20% 10_git_files/figure-html/Fig0-1.pdf 10_git_files/figure-html/Fig0-1.png 
```

```{tikz}
%| label: Fig1
%| engine: tikz
%| echo: false
%| cache: true
%| include: false
%| dependson: common
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"
\input{resources/common.tikz}
\begin{tikzpicture}[every node/.style={inner sep=0,outer sep=0, minimum height = 0}]
\commit{}{A}{color_commit!30}{}{}
\draw [-,line width=3pt,draw=black!60] (A) -- ++(-1,0);
\end{tikzpicture}
```
```{bash}
#| label: Fig1-conv
#| warning: false
#| message: false
#| include: false
#| echo: false
convert -trim +repage -density 300 -resize 20% 10_git_files/figure-html/Fig1-1.pdf 10_git_files/figure-html/Fig1-1.png
```


```{tikz}
%| label: Fig2
%| engine: tikz
%| echo: false
%| cache: true
%| include: false
%| dependson: common
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"
\input{resources/common.tikz}
\begin{tikzpicture}[every node/.style={inner sep=0,outer sep=0, minimum height = 0}]
\commit{}{A}{color_commit}{}{}
\draw [-,line width=3pt,draw=black!60] (A) -- ++(-1,0);
\end{tikzpicture}
```
```{bash}
#| label: Fig2-conv
#| warning: false
#| message: false
#| include: false
#| echo: false
convert -trim +repage -density 300 -resize 20% 10_git_files/figure-html/Fig2-1.pdf 10_git_files/figure-html/Fig2-1.png
```

```{tikz}
%| label: Fig3a
%| engine: tikz
%| echo: false
%| cache: true
%| include: false
%| dependson: common
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"
\input{resources/common.tikz}
\begin{tikzpicture}%[every node/.style={inner sep=0,outer sep=0, minimum height = 0}]
\commit{}{A}{color_inactive}{}{}
\commit{right = 1cm of A}{B}{color_commit}{}{}
\commit{right = 1cm of B}{C}{color_detached}{}{}
\draw [-,line width=3pt,draw=black!60] (A) -- ++(-1,0);
\draw [-,line width=3pt,draw=black!60] (B) -- (A);
\end{tikzpicture}
```
```{bash}
#| label: Fig3a-conv
#| warning: false
#| message: false
#| include: false
#| echo: false
convert -trim +repage -density 300 -resize 20% 10_git_files/figure-html/Fig3a-1.pdf 10_git_files/figure-html/Fig3a-1.png  
```

```{tikz}
%| label: Fig3b
%| engine: tikz
%| echo: false
%| cache: true
%| include: false
%| dependson: common
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"
\input{resources/common.tikz}
\begin{tikzpicture}%[every node/.style={inner sep=0,outer sep=0, minimum height = 0}]
\commit{}{A}{color_inactive}{}{}
\commit{right = 1cm of A}{B}{color_commit}{}{}
\commit{right = 1cm of B}{C}{color_detached!30}{}{}
\draw [-,line width=3pt,draw=black!60] (A) -- ++(-1,0);
\draw [-,line width=3pt,draw=black!60] (B) -- (A);
\draw [->,dashed,line width=3pt,draw=black!60] (C) -- (B);
\end{tikzpicture}
```
```{bash}
#| label: Fig3b-conv
#| warning: false
#| message: false
#| include: false
#| echo: false
convert -trim +repage -density 300 -resize 20% 10_git_files/figure-html/Fig3b-1.pdf 10_git_files/figure-html/Fig3b-1.png 
```

```{tikz}
%| label: Fig3c
%| engine: tikz
%| echo: false
%| cache: true
%| include: false
%| dependson: common
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"
\input{resources/common.tikz}
\begin{tikzpicture}%[every node/.style={inner sep=0,outer sep=0, minimum height = 0}]
\commit{}{A}{color_inactive}{}{}
\commit{right = 1cm of A}{B}{color_inactive}{}{}
\commit{right = 1cm of B}{C}{color_commit}{}{}
\draw [-,line width=3pt,draw=black!60] (A) -- ++(-1,0);
\draw [-,line width=3pt,draw=black!60] (B) -- (A);
\draw [-,line width=3pt,draw=black!60] (C) -- (B);
\draw [->,line width=3pt,draw=black!60] (A) to[out=45] (C);

\end{tikzpicture}
```
```{bash}
#| label: Fig3c-conv
#| warning: false
#| message: false
#| include: false
#| echo: false
convert -trim +repage -density 300 -resize 20% 10_git_files/figure-html/Fig3c-1.pdf 10_git_files/figure-html/Fig3c-1.png 
```

```{tikz}
%| label: Fig4
%| engine: tikz
%| echo: false
%| cache: true
%| include: false
%| dependson: common
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"
\input{resources/common.tikz}

\tikzstyle{refText} = [font={\fontspec[Scale=1.5]{InconsolataSemiCondensed-Regular}}]
\begin{tikzpicture}%[every node/.style={inner sep=0,outer sep=0, minimum height = 0}]
\commit{}{A}{color_inactive}{}{}
\commit{right = 1cm of A}{B}{color_inactive}{}{}
\commit{right = 1cm of B}{C}{color_commit}{}{}
\draw [-,line width=3pt,draw=black!60] (A) -- ++(-1,0);
\draw [-,line width=3pt,draw=black!60] (B) -- (A);
\draw [-,line width=3pt,draw=black!60] (C) -- (B);
\commit{above = 0.5cm of B}{D}{color_branch}{}{}
\draw [-,line width=3pt,draw=black!60] (A.east) to[out=0,in=180] (D);
%\node[right = 0.5cm of C, rectangle, refText] (master) {main};
\master{right = 0.5cm of C}
\draw[->,line width=3pt,draw=black!60] (master) -- (C);
\branch{right = 0.5cm of D}{Feature} 
\draw[->,line width=3pt,draw=black!60] (Feature) -- (D);
\end{tikzpicture}
```
```{bash}
#| label: Fig4-conv
#| warning: false
#| message: false
#| include: false
#| echo: false
convert -trim +repage -density 300 -resize 20% 10_git_files/figure-html/Fig4-1.pdf 10_git_files/figure-html/Fig4-1.png 
```


```{tikz}
%| label: Fig5
%| engine: tikz
%| echo: false
%| cache: true
%| include: false
%| dependson: common
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"
\input{resources/common.tikz}
\tikzstyle{refText} = [font={\fontspec[Scale=1.5]{InconsolataSemiCondensed-Regular}}]
\begin{tikzpicture}%[every node/.style={inner sep=0,outer sep=0, minimum height = 0}]
\commit{}{A}{color_inactive}{}{}
\commit{right = 1cm of A}{B}{color_inactive}{}{}
\commit{right = 1cm of B}{C}{color_commit}{}{}
\draw [-,line width=3pt,draw=black!60] (A) -- ++(-1,0);
\draw [-,line width=3pt,draw=black!60] (B) -- (A);
\draw [-,line width=3pt,draw=black!60] (C) -- (B);
\commit{above = 0.5cm of B}{D}{color_inactive}{}{}
\draw [-,line width=3pt,draw=black!60] (A.east) to[out=0,in=180] (D);
\master{right = 0.5cm of C}\draw[->,line width=3pt,draw=black!60] (master) -- (C);
\branch{right = 0.5cm of D}{Feature}\draw[->,line width=3pt,draw=black!60] (Feature) -- (D);
\draw [-,line width=3pt,draw=black!60] (D.east) to[out=0,in=180] (C);
\end{tikzpicture}
```

```{bash}
#| label: Fig5-conv
#| echo: false
convert -trim +repage -density 300 -resize 20% 10_git_files/figure-html/Fig5-1.pdf 10_git_files/figure-html/Fig5-1.png   
```

```{tikz}
%| label: Fig6a
%| engine: tikz
%| echo: false
%| cache: true
%| include: false
%| dependson: common
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"
\input{resources/common.tikz}
\tikzstyle{refText} = [font={\fontspec[Scale=1.5]{InconsolataSemiCondensed-Regular}}]
\begin{tikzpicture}%[every node/.style={inner sep=0,outer sep=0, minimum height = 0}]
\commit{}{A}{color_inactive}{}{}
\commit{right = 1cm of A}{B}{color_detached!30}{}{}
\commit{right = 1cm of B}{C}{color_commit}{}{}
\draw [-,line width=3pt,draw=black!60] (A) -- ++(-1,0);
\draw [-,line width=3pt,draw=black!60] (C) -- (A);
\end{tikzpicture}
```

```{bash}
#| label: Fig6a-conv
#| echo: false
convert -trim +repage -density 300 -resize 20% 10_git_files/figure-html/Fig6a-1.pdf 10_git_files/figure-html/Fig6a-1.png  
```

```{tikz}
%| label: Fig5b
%| engine: tikz
%| echo: false
%| cache: true
%| include: false
%| dependson: common
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"
\input{resources/common.tikz}
\tikzstyle{refText} = [font={\fontspec[Scale=1.5]{InconsolataSemiCondensed-Regular}}]
\begin{tikzpicture}%[every node/.style={inner sep=0,outer sep=0, minimum height = 0}]
\commit{}{A}{color_commit}{}{}
\draw [-,line width=3pt,draw=black!60] (A) -- ++(-1,0);
%\commit{right = 1cm of A}{B}{color_commit}{}{}
%\draw [-,line width=3pt,draw=black!60] (B) -- (A);
\master{right = 0.5cm of A}\draw[->,line width=3pt,draw=black!60] (master) -- (A);

\rcommit{below = 1cm of A}{rA}{color_inactive}{}{}
\draw [-,line width=3pt,draw=black!60] (rA) -- ++(-1,0);
\rcommit{right = 1cm of rA}{rB}{color_commit}{}{}
\draw [-,line width=3pt,draw=black!60] (rB) -- (rA);
\rmaster{right = 0.5cm of rB}\draw[->,line width=3pt,draw=black!60] (rmaster) -- (rB);

\draw [<-,line width=3pt, draw=black!60, dashed] (A) -- (rB);
\end{tikzpicture}
```
```{bash}
#| label: Fig5b-conv
#| echo: false
convert -trim +repage -density 300 -resize 20% 10_git_files/figure-html/Fig5b-1.pdf 10_git_files/figure-html/Fig5b-1.png 
```

```{tikz}
%| label: Fig5a
%| engine: tikz
%| echo: false
%| cache: true
%| include: false
%| dependson: common
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"
\input{resources/common.tikz}
\tikzstyle{refText} = [font={\fontspec[Scale=1.5]{InconsolataSemiCondensed-Regular}}]
\begin{tikzpicture}%[every node/.style={inner sep=0,outer sep=0, minimum height = 0}]
\commit{}{A}{color_inactive}{}{}
\draw [-,line width=3pt,draw=black!60] (A) -- ++(-1,0);
\commit{right = 1cm of A}{B}{color_commit}{}{}
\draw [-,line width=3pt,draw=black!60] (B) -- (A);
\master{right = 0.5cm of B}\draw[->,line width=3pt,draw=black!60] (master) -- (B);

\rcommit{below = 1cm of A}{rA}{color_commit}{}{}
\draw [-,line width=3pt,draw=black!60] (rA) -- ++(-1,0);
\rmaster{right = 0.5cm of rA}\draw[->,line width=3pt,draw=black!60] (rmaster) -- (rA);

\draw [->,line width=3pt, draw=black!60, dashed] (B) -- (rA);
\end{tikzpicture}
```
```{bash}
#| label: Fig5a-conv
#| echo: false
convert -trim +repage -density 300 -resize 20% 10_git_files/figure-html/Fig5a-1.pdf 10_git_files/figure-html/Fig5a-1.png
```


<table class= "table-sm table-borderless" style='border-spacing:20px;'>
<tr>
<td>
<a href="#Initialize">Initialize git</a><br>
![](10_git_files/figure-html/Fig0-1.png)
</td>
<td width='40%'>
`git init`
</td>
<td>
Establish a git repository (within the current path if no path provided)
</td>
</tr>
<tr>
<td>
<a href="#Commit">Staging</a><br> 
    ![](10_git_files/figure-html/Fig1-1.png)
</td>
<td>
`git add <file>`<br>
where `file` is one or more files to stage
</td>
<td>
Staging is indicating which files and their states are to be included in the next commit.
</td>
</tr>

<tr>
<td>
<a href="#Commit">Committing</a><br>
    ![](10_git_files/figure-html/Fig2-1.png)
</td>
<td>
`git commit -m "<Commit message>"`<br>
where `<Commit message>` is a message to accompany the commit
</td>
<td>
Commiting generates a 'snapshot' of the file system.
</td>
</tr>
<tr>
  <td>
    <a href="#checkout">Checkout</a><br>
    ![](10_git_files/figure-html/Fig3a-1.png)
  </td>
  <td>
    `git checkout "<commit>"`<br>
    where `<commit>` is a reference to a commit to be reviewed
  </td>
  <td>
    Explore the state associated with a specific commit
  </td>
</tr>
<tr>
  <td>
    <a href="#reset">Reset</a><br>
    <!-- <img src="10_git_files/figure-html/Fig3b-1.png" class="" alt=""  style="transform: scale(0.2);"/> -->
    ![](10_git_files/figure-html/Fig3b-1.png)
  </td>
  <td>
    `git reset --hard "<commit>"`<br>
    where `<commit>` is a reference to a commit
  </td>
  <td>
    Return to a previous state, effectively erasing subsequent commits..
  </td>
</tr>
<tr>
  <td>
    <a href="#revert">Revert</a><br>
    ![](10_git_files/figure-html/Fig3c-1.png)
  </td>
  <td>
    `git revert "<commit>"`<br>
    where `<commit>` is a reference to a commit that should be nullified (inverted)
  </td>
  <td>
    Generate a new commit that reverses the changes introduced by a commit thereby effectively rolling back to a previous state (the one prior to the nominated commit) whilst still maintaining full commit history.
  </td>
</tr>

<tr>
  <td>
    <a href="#Branching">Branching</a><br>
    ![](10_git_files/figure-html/Fig4-1.png)
  </td>
  <td>
    `git branch <name>`<br>
    `git checkout <name>`<br>
    where `<name>` is a reference to a branch name (e.g. 'Feature')
  </td>
  <td>
    Take edits in the project in a new direction to allow for modifications that will
    not affect the main (master) branch.
  </td>
</tr>

<tr>
  <td>
    <a href="#Merging">Merging</a><br>
    ![](10_git_files/figure-html/Fig5-1.png)
  </td>
   <td>
     `git checkout master`<br>
     `git branch <name>`<br>
     where `<name>` is a reference to a branch name (e.g. 'Feature') that
     is to be merged back into `master`.
  </td>
  <td>
    Incorporate changes in a branch into another branch (typically `master`).
  </td>
</tr>

<tr>
  <td>
    <a href="#rebase">Rebasing</a><br>
    ![](10_git_files/figure-html/Fig6a-1.png)
  </td>
   <td>
     `git rebase -i HEAD~<number>`<br>
     where `<number>` is the number of previous commits to
     squash together with head.
  </td>
  <td>
    Combine multiple commits together into a single larger commit.
  </td>
</tr>

<tr>
  <td>
    <a href="#Pulling">Pulling</a><br>
    ![](10_git_files/figure-html/Fig5b-1.png)
  </td>
   <td>
     `git pull -u <remote> <branch>`<br>
     where `<remote>` is the name of the remote (typically `origin`)
     and `<branch>` is the branch to sync with remote (typically `master`).
  </td>
  <td>
    Pull changes from a branch of a remote repository.
  </td>
</tr>

<tr>
  <td>
    <a href="#Pushing">Pushing</a><br>
    ![](10_git_files/figure-html/Fig5a-1.png)
  </td>
   <td>
     `git push -u <remote> <branch>`<br>
     where `<remote>` is the name of the remote (typically `origin`)
     and `<branch>` is the branch to sync with remote (typically `master`).
  </td>
  <td>
    Push changes up to a branch of a remote repository.
  </td>
</tr>
</table>


# Context


Git is a distributed versioning system. This means that the complete
contents and history of a repository (in simplistic terms a repository
is a collection of files and associated metadata) can be completely
duplicated across multiple locations.

No doubt you have previously been working on a file (could be a
document, spreadsheet, script or any other type of file) and got to a
point where you have thought that you are starting to make edits that
substantially change the file and therefore have considered saving the
new file with a new name that indicates that it is a new version.

```{tikz}
%| label: Fig10
%| engine: tikz
%| echo: false
%| cache: true
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"

\tikzstyle{CODE} = [font={\fontspec[Scale=2]{InconsolataSemiCondensed-Regular}}]
\tikzstyle{fileText} = [font={\fontspec[Scale=1]{InconsolataSemiCondensed-Regular}}] 

\definecolor{color_workspace}{rgb}{0.12,0.6,0.51}
\definecolor{color_index}{rgb}{0.78,0.86,0.27}
\definecolor{color_local}{rgb}{0.9,0.9,0.2}
\definecolor{color_remote}{rgb}{1,0.55,0.15}
\definecolor{color_master}{rgb}{0.36,0.27,0.87}
\definecolor{color_head}{HTML}{6495ED} %\definecolor{color_head}{rgb}{0.26,0.65,0.91}

\newcommand{\file}[3] {
\coordinate (#3) at (#1);
\draw [anchor=top left](#1) rectangle ++(1.5,-2);
\draw [fill=color_workspace]($(#1) +(1.5,0)$) -- ++(0,-0.5) --++(-0.5,0.5) -- cycle; 
\node [anchor=north west,fileText] at ($(#1) +(0,-0.5)$) {#2};
}

\begin{tikzpicture}

\file{0,0}{\begin{minipage}{1.3cm}\textcolor{red}{- item 1}\\\textcolor{red}{- item 2}\end{minipage}}{F1}
\node [fileText] at ($(F1) + (0.75,0.3)$) {Version 1};
\node [fileText] at ($(F1) + (0.75,-2.3)$) {todo.txt};

\file{2,0}{\begin{minipage}{1.3cm}- item 1\\- item 2\\\textcolor{red}{- item 3}\end{minipage}}{F2}
\node [fileText] at ($(F2) + (0.75,0.3)$) {Version 2};
\node [fileText] at ($(F2) + (0.75,-2.3)$) {todo2.txt};

\file{4,0}{\begin{minipage}{1.3cm}- item 1\\- item 2\\- item 3\\\textcolor{red}{- item 4}\end{minipage}}{F3}
\node [fileText] at ($(F3) + (0.75,0.3)$) {Version 3};
\node [fileText] at ($(F3) + (0.75,-2.3)$) {todo3.txt};

\file{6,0}{\begin{minipage}{1.3cm}- item 1\\- item 2\\\textcolor{blue}{- item 4}\end{minipage}}{F4}
\node [fileText] at ($(F4) + (0.75,0.3)$) {Version 4};
\node [fileText] at ($(F4) + (0.75,-2.3)$) {todo4.txt};

\node [fileText] at ($(F4) +(3.5,-1)$) {\begin{minipage}{2.5cm}An example of a poor, adhoc versioning system.\end{minipage}};)

\end{tikzpicture}
```

In the above diagram, new content is indicated in red and
modifications in blue.

Whist this approach is ok, it is fairly limited and unsophisticated
approach to versioning (keeping multiple versions of a file). Firstly,
if you edit this file over many sessions and each time save with a
different name, it becomes very difficult to either keep tract of what
changes are associated with each version of the file, or the order in
which the changes were made. This is massively compounded if a project
comprises multiple files or has multiple authors.

Instead, imagine a system in which you could take a snapshot of state
of your files and also provide a description outlining what changes
you have made. Now imagine that the system was able to store and keep
track of a succession of such versions in such a way that allows you
to roll back to any previous versions of the files and exchange the
entire history of changes with others collaborators - that is the
purpose of git.

```{tikz}
%| label: Fig11
%| engine: tikz
%| echo: false
%| cache: true
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"

\tikzstyle{CODE} = [font={\fontspec[Scale=2]{InconsolataSemiCondensed-Regular}}]
\tikzstyle{fileText} = [font={\fontspec[Scale=1]{InconsolataSemiCondensed-Regular}}] 

\definecolor{color_workspace}{rgb}{0.12,0.6,0.51}
\definecolor{color_index}{rgb}{0.78,0.86,0.27}
\definecolor{color_local}{rgb}{0.9,0.9,0.2}
\definecolor{color_remote}{rgb}{1,0.55,0.15}
\definecolor{color_master}{rgb}{0.36,0.27,0.87}
\definecolor{color_head}{HTML}{6495ED} %\definecolor{color_head}{rgb}{0.26,0.65,0.91}

\newcommand{\file}[3] {
\coordinate (#3) at (#1);
\draw [anchor=top left](#1) rectangle ++(1.5,-2);
\draw [fill=color_workspace]($(#1) +(1.5,0)$) -- ++(0,-0.5) --++(-0.5,0.5) -- cycle; 
\node [anchor=north west,fileText] at ($(#1) +(0,-0.5)$) {#2};
}

\begin{tikzpicture}
%Version 1
\file{0,0}{\begin{minipage}{1.3cm}\textcolor{red}{- item 1}\\\textcolor{red}{- item 2}\end{minipage}}{F1}
\node [fileText] at ($(F1) + (0.75,-2.3)$) {todo.txt};

\file{0,-3}{\begin{minipage}{1.3cm}\textcolor{red}{Title}\\[1em]\textcolor{red}{content}\end{minipage}}{F1a}
\node [fileText] at ($(F1a) + (0.75,-2.3)$) {fileA.doc};


\node [fileText] at ($(F1) + (0.2,0.5)$) (V1) {Version 1};
\draw (V1.200) -- (V1.200 |- F1a);
\draw (V1.200 |- F1) -- (F1);
\draw (V1.200 |- F1a) -- (F1a);

%Version 2
\file{3,0}{\begin{minipage}{1.3cm}- item 1\\- item 2\\\textcolor{red}{- item 3}\end{minipage}}{F2}
\node [fileText] at ($(F2) + (0.75,-2.3)$) {todo.txt};

\file{3,-3}{\begin{minipage}{1.3cm}\textcolor{black}{Title}\\[1em]\textcolor{black}{content}\end{minipage}}{F2a}
\node [fileText] at ($(F2a) + (0.75,-2.3)$) {fileA.doc};

\file{3,-6}{\begin{minipage}{1.3cm}\textcolor{red}{ID,Num}\\\textcolor{red}{1,10}\\\textcolor{red}{2,15}\end{minipage}}{F2b}
\node [fileText] at ($(F2b) + (0.75,-2.3)$) {fileB.csv};

\node [fileText] at ($(F2) + (0.2,0.5)$) (V2) {Version 2};
\draw (V2.200) -- (V2.200 |- F2b);
\draw (V2.200 |- F2) -- (F2);
\draw (V2.200 |- F2a) -- (F2a);
\draw (V2.200 |- F2b) -- (F2b);

%Version 3
\file{6,0}{\begin{minipage}{1.3cm}- item 1\\- item 2\\- item 3\\\textcolor{red}{- item 4}\end{minipage}}{F3}
\node [fileText] at ($(F3) + (0.75,-2.3)$) {todo.txt};

\file{6,-3}{\begin{minipage}{1.3cm}\textcolor{black}{Title}\\[1em]\textcolor{black}{content}\end{minipage}}{F3a}
\node [fileText] at ($(F3a) + (0.75,-2.3)$) {fileA.doc};

\file{6,-6}{\begin{minipage}{1.3cm}\textcolor{black}{ID,Num}\\\textcolor{black}{1,10}\\2,\textcolor{blue}{25}\end{minipage}}{F3b}
\node [fileText] at ($(F3b) + (0.75,-2.3)$) {fileB.csv};

\node [fileText] at ($(F3) + (0.2,0.5)$) (V3) {Version 3};
\draw (V3.200) -- (V3.200 |- F3b);
\draw (V3.200 |- F3) -- (F3);
\draw (V3.200 |- F3a) -- (F3a);
\draw (V3.200 |- F3b) -- (F3b);

\node [fileText] at ($(F3) +(4,-1)$) {\begin{minipage}{3cm}An example of a more sophisticated versioning system\end{minipage}};

\end{tikzpicture}
```

In the above diagram (which I must point out is **not actually how
git works**), you can see that we are keeping track of multiple
documents and potentially multiple changes within each document. What
constitutes a version (as in how many changes and to what files) is
completely arbitrary. Each individual edit can define a separate
version.

One of the issues with the above system is that there is a lot of
redundancy. With each new version an addition copy of the project's
entire filesystem (all its files) must be stored. In the above case,
Version 2 and 3 both contain identical copies of
`fileA.doc`. Is there a way of reducing the required size
of the snapshots by only keeping copies of those that have actually
changed? **this is what git achieves**. Git versions (or snapshots
known as _commits_) store files that have changed since the
previous and files that have not changed are only represented by links
to instances of these files within previous snapshots.

```{tikz}
%| label: Fig12
%| engine: tikz
%| echo: false
%| cache: true
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"

\tikzstyle{CODE} = [font={\fontspec[Scale=2]{InconsolataSemiCondensed-Regular}}]
\tikzstyle{fileText} = [font={\fontspec[Scale=1]{InconsolataSemiCondensed-Regular}}] 

\definecolor{color_workspace}{rgb}{0.12,0.6,0.51}
\definecolor{color_index}{rgb}{0.78,0.86,0.27}
\definecolor{color_local}{rgb}{0.9,0.9,0.2}
\definecolor{color_remote}{rgb}{1,0.55,0.15}
\definecolor{color_master}{rgb}{0.36,0.27,0.87}
\definecolor{color_head}{HTML}{6495ED} %\definecolor{color_head}{rgb}{0.26,0.65,0.91}

\newcommand{\file}[3] {
\coordinate (#3) at (#1);
\draw [anchor=top left](#1) rectangle ++(1.5,-2);
\draw [fill=color_workspace]($(#1) +(1.5,0)$) -- ++(0,-0.5) --++(-0.5,0.5) -- cycle; 
\node [anchor=north west,fileText] at ($(#1) +(0,-0.5)$) {#2};
}

\begin{tikzpicture}
%Version 1
\file{0,0}{\begin{minipage}{1.3cm}\textcolor{red}{- item 1}\\\textcolor{red}{- item 2}\end{minipage}}{F1}
\node [fileText] at ($(F1) + (0.75,-2.3)$) {todo.txt};

\file{0,-3}{\begin{minipage}{1.3cm}\textcolor{red}{Title}\\[1em]\textcolor{red}{content}\end{minipage}}{F1a}
\node [fileText] at ($(F1a) + (0.75,-2.3)$) {fileA.doc};


\node [fileText] at ($(F1) + (0.2,0.5)$) (V1) {Version 1};
\draw (V1.200) -- (V1.200 |- F1a);
\draw (V1.200 |- F1) -- (F1);
\draw (V1.200 |- F1a) -- (F1a);

%Version 2
\file{3,0}{\begin{minipage}{1.3cm}- item 1\\- item 2\\\textcolor{red}{- item 3}\end{minipage}}{F2}
\node [fileText] at ($(F2) + (0.75,-2.3)$) {todo.txt};

\file{3,-3}{\begin{minipage}{1.3cm}\textcolor{black}{Title}\\[1em]\textcolor{black}{content}\end{minipage}}{F2a}
\node [fileText] at ($(F2a) + (0.75,-2.3)$) {fileA.doc};

\file{3,-6}{\begin{minipage}{1.3cm}\textcolor{red}{ID,Num}\\\textcolor{red}{1,10}\\\textcolor{red}{2,15}\end{minipage}}{F2b}
\node [fileText] at ($(F2b) + (0.75,-2.3)$) {fileB.csv};

\node [fileText] at ($(F2) + (0.2,0.5)$) (V2) {Version 2};
\draw (V2.200) -- (V2.200 |- F2b);
\draw (V2.200 |- F2) -- (F2);
\draw (V2.200 |- F2a) -- (F2a);
\draw (V2.200 |- F2b) -- (F2b);

%Version 3
\file{6,0}{\begin{minipage}{1.3cm}- item 1\\- item 2\\- item 3\\\textcolor{red}{- item 4}\end{minipage}}{F3}
\node [fileText] at ($(F3) + (0.75,-2.3)$) {todo.txt};

%\file{6,-3}{\begin{minipage}{1.3cm}\textcolor{black}{Title}\\[1em]\textcolor{black}{content}\end{minipage}}{F3a}
\node [anchor=west,text=green!50!black!50] at (6,-3) (F3a) {\#\#\#\#\#\#}; 
\node [fileText] at ($(F3 |- F3a) + (0.75,-0.5)$) {fileA.doc};
\draw[->,very thick,color=green!50!black!50] (F3a) -- ($(F2a) +(1.6,-0.5)$);


\file{6,-6}{\begin{minipage}{1.3cm}\textcolor{black}{ID,Num}\\\textcolor{black}{1,10}\\2,\textcolor{blue}{25}\end{minipage}}{F3b}
\node [fileText] at ($(F3b) + (0.75,-2.3)$) {fileB.csv};

\node [fileText] at ($(F3) + (0.2,0.5)$) (V3) {Version 3};
\draw (V3.200) -- (V3.200 |- F3b);
\draw (V3.200 |- F3) -- (F3);
\draw (V3.200 |- F3a) -- (F3a);
\draw (V3.200 |- F3b) -- (F3b);

\node [fileText] at ($(F3) +(4,-1)$) {\begin{minipage}{3cm}An example of a more sophisticated, yet efficient versioning system\end{minipage}};

\end{tikzpicture}
```

Now consider the following:

- You might have noticed that a new version can comprise multiple
  changes across multiple files. However, what if we have made
  numerous changes to numerous files over the course of an editing
  session (perhaps simultaneously addressing multiple different
  editing suggestions at a time), yet we did not want to lump all of
  these changes together into a single save point (snapshot). For
  example, the multiple changes might constitute addressing three
  independent issues, so although all edits were made simultaneously,
  we wish to record and describe the changes in three separate
  snapshots.

 - What if this project had multiple contributors some of whom are
   working on new components of the project and some whom are working
   simultaneously on the same set of files? How can the system ensure
   that all contributors are in sync with each other and that new
   components are only introduced to the project proper once they are
   stable and agreed upon?

- What if there are files present within our project that we do not
  wish to keep track of. These files could be log files, compilation
  intermediates etc.

- Given that projects can comprise many files (some of which can be
  large), is it possible to store compressed files so as to reduce the
  storage and bandwidth burden?
		 
# Overview of git

The above discussion provides context for understanding how git works.
Within git, files can exist in one of four states:

- **untracked** - these are files within the directory tree that are
  not to be included in the repository (not part of any snapshot)
- **modified** - these are files that have changed since the last
  snapshot
- **staged** - these are files that are nominated to be part of the
  next snapshot
- **committed** - these are files that are represented in a stored
  snapshot (called a _commit_). One a snapshot is committed, it is a
  permanent part of the repositories history

Since untracked files are not part of a repository, we will ignore
these for now.

Conceptually, there are three main sections of a repository:

- **Working directory** - (or **Workspace**) is the obvious tree (set
  of files and folders) that is present on disc and comprises the
  actual files that you directly create, edit etc.
- **Staging area** - (or **index**) is a hidden file that contains
  metadata about the files to be included in the next snapshot
  (commit)
- **Repository** - the snapshots (commits). The commits are themselves
  just additional metadata pointing to a particular snapshot.

A superficial representation of some aspects of the git version
control system follows. Here, the physical file tree in the
_workspace_ can be added to the _staging area_ before this snapshot
can be committed to the _local repository_.

After we add the two files (`file 1` and `file 2`), both files will be
considered in an _untracked_ state. Adding the files to the _staging
area_ changes their state to _staged_. Finally when we commit, the
files are in a _committed_ state.

```{tikz}
%| label: Fig13
%| engine: tikz
%| echo: false
%| cache: true
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"

\usetikzlibrary{shapes,arrows,shadows,positioning,mindmap,backgrounds,decorations, calc,fit, decorations.pathreplacing,decorations.pathmorphing, shadings,shapes.geometric,patterns} 
\usetikzlibrary{arrows.meta}
\tikzstyle{TARGET} = [font={\fontspec[Scale=2]{NotoSans-Regular}}] 
\tikzstyle{CODE} = [font={\fontspec[Scale=2]{InconsolataSemiCondensed-Regular}}]
\tikzstyle{TREE} = [font={\fontspec[Scale=1.5]{InconsolataSemiCondensed-Regular}}] 
\tikzstyle{fileText} = [font={\fontspec[Scale=1]{InconsolataSemiCondensed-Regular}}] 

\definecolor{color_workspace}{rgb}{0.12,0.6,0.51}
\definecolor{color_index}{rgb}{0.78,0.86,0.27}
\definecolor{color_local}{rgb}{0.9,0.9,0.2}
\definecolor{color_remote}{rgb}{1,0.55,0.15}
\definecolor{color_master}{rgb}{0.36,0.27,0.87}
\definecolor{color_head}{HTML}{6495ED} %\definecolor{color_head}{rgb}{0.26,0.65,0.91}

% A template for making the storage symbol
\newcommand{\state}[3]{
\draw (#1) node [draw=none,fill=#2,shape=circle,minimum width=2cm] (#3) {
\begin{tikzpicture}
\node [draw=white, fill=white,shape=cylinder,shape aspect=1.3 ,shape border rotate=90,minimum height=1.6cm,minimum width=1.5cm] at (0,0) (Cylinder) {};
\draw[draw=#2,very thick,line width=0.1cm,anchor=north west] ($(Cylinder.north west) +(-0.05cm,-0.1cm)$) arc (-180:0:0.8cm and 0.2cm); 
\draw[draw=#2,very thick,line width=0.1cm,anchor=north west] ($(Cylinder.north west) +(-0.05cm,-0.5cm)$) arc (-180:0:0.8cm and 0.2cm); 
\draw[draw=#2,very thick,line width=0.1cm,anchor=north west] ($(Cylinder.north west) +(-0.05cm,-0.9cm)$) arc (-180:0:0.8cm and 0.2cm); 
\end{tikzpicture}
};
}

% Define dirtree
\makeatletter
\newcount\dirtree@lvl
\newcount\dirtree@plvl
\newcount\dirtree@clvl
\def\dirtree@growth{%
\ifnum\tikznumberofcurrentchild=1\relax
\global\advance\dirtree@plvl by 1
\expandafter\xdef\csname dirtree@p@\the\dirtree@plvl\endcsname{\the\dirtree@lvl}
\fi
\global\advance\dirtree@lvl by 1\relax
\dirtree@clvl=\dirtree@lvl
\advance\dirtree@clvl by -\csname dirtree@p@\the\dirtree@plvl\endcsname
\pgf@xa=0.25cm\relax
\pgf@ya=-0.5cm\relax
\pgf@ya=\dirtree@clvl\pgf@ya
\pgftransformshift{\pgfqpoint{\the\pgf@xa}{\the\pgf@ya}}%
\ifnum\tikznumberofcurrentchild=\tikznumberofchildren
\global\advance\dirtree@plvl by -1
\fi
}

\tikzset{
dirtree/.style={
growth function=\dirtree@growth,
every node/.style={anchor=north},
every child node/.style={anchor=west},
edge from parent path={(\tikzparentnode\tikzparentanchor) |- (\tikzchildnode\tikzchildanchor)}
}
}
\makeatother

\newcommand{\file}[3] {
\coordinate (#3) at (#1);
\draw [anchor=top left](#1) rectangle ++(1.5,-2);
\draw [fill=color_workspace]($(#1) +(1.5,0)$) -- ++(0,-0.5) --++(-0.5,0.5) -- cycle; 
\node [anchor=north west,fileText] at ($(#1) +(0,-0.5)$) {#2};
}
 
\begin{tikzpicture}
 
\state{0,0}{color_workspace}{W}
\node[TARGET,fill=white] at ($(W.north) +(0,0.5cm)$) {Workspace};
\state{6,0}{color_index}{I}
\node[TARGET,fill=white] at ($(I.north) +(0,0.5cm)$) {Staging Area};
\state{12,0}{color_local}{L}
\node[TARGET,fill=white] at ($(L.north) +(0,0.5cm)$) {Local Repository};

\draw[{Round Cap[length=0.5em]}-Triangle Cap,very thick, line width=1cm, draw=color_index] ($(W.east) + (0.1cm,0)$) -- ($(I.west) + (-0.1cm,0)$) node[anchor=center,pos=0.5, text=black,align=center,CODE] {add};

\draw[{Round Cap[length=0.5em]}-Triangle Cap,very thick, line width=1cm, draw=color_local] ($(I.east) + (0.1cm,0)$) -- ($(L.west) + (-0.1cm,0)$) node[anchor=center,pos=0.5, text=black,align=center,CODE] {commit};

\node [anchor=north west] at ($(W) +(-1cm,-1cm)$)  (W0) {
\begin{tikzpicture}[dirtree,TREE]
\node {} 
child {node {file 2}}
child { node {file 1}};
\end{tikzpicture}
};
%\draw[decorate,decoration={brace,amplitude=5pt},very thick] ($(W0.north) + (-1cm,-1cm)$)  -- ($(W0.south) + (-1cm,0.2cm)$);
 
\node [anchor=north west] at ($(I) +(-1cm,-1cm)$)  (W0) {
\begin{tikzpicture}[dirtree,TREE,text=gray,color=gray]
\node {} 
child {node {file 2}}
child { node {file 1}};
\end{tikzpicture}
};


\node [anchor=north west] at ($(L) +(-1cm,-1cm)$)  (L0) {
\begin{tikzpicture}[dirtree,TREE]
\node {} 
child {node {file 2}}
child { node {file 1}};
\end{tikzpicture}
};
\draw[decorate,decoration={brace,amplitude=5pt},very thick] ($(L0.north) + (1.3cm,-0.4cm)$)  -- ($(L0.south) + (1.3cm,0.2cm)$);
\node [TREE,anchor=west] at ($(L0) +(1.5,-0.1)$) {committed snapshot 1}; 
\end{tikzpicture}
```
 

Now if we add another file (`file 3`) to our
_workspace_, add this file to the _staging area_ and then
commit the change, the resulting committed snapshot in the _local
repository_ will resemble the _workspace_. Note, although the
_staging area_ contains all three files, only `file 3`
points to any new internal content - since `file 1` and
`file 2` have unmodified, their instances in the _staging
area_ point to the same instances as previous. Similarly, the
second commit in the _Local repository_ will point to one new
representation (associated with `file 3`) and two previous
representations (associated with `file 1` and `file
2`).

```{tikz}
%| label: Fig14
%| engine: tikz
%| echo: false
%| cache: true
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"

\usetikzlibrary{shapes,arrows,shadows,positioning,mindmap,backgrounds,decorations, calc,fit, decorations.pathreplacing,decorations.pathmorphing, shadings,shapes.geometric,patterns} 
\usetikzlibrary{arrows.meta}
\tikzstyle{TARGET} = [font={\fontspec[Scale=2]{NotoSans-Regular}}] 
\tikzstyle{CODE} = [font={\fontspec[Scale=2]{InconsolataSemiCondensed-Regular}}]
\tikzstyle{TREE} = [font={\fontspec[Scale=1.5]{InconsolataSemiCondensed-Regular}}] 
\tikzstyle{fileText} = [font={\fontspec[Scale=1]{InconsolataSemiCondensed-Regular}}] 

\definecolor{color_workspace}{rgb}{0.12,0.6,0.51}
\definecolor{color_index}{rgb}{0.78,0.86,0.27}
\definecolor{color_local}{rgb}{0.9,0.9,0.2}
\definecolor{color_remote}{rgb}{1,0.55,0.15}
\definecolor{color_master}{rgb}{0.36,0.27,0.87}
\definecolor{color_head}{HTML}{6495ED} %\definecolor{color_head}{rgb}{0.26,0.65,0.91}

% A template for making the storage symbol
\newcommand{\state}[3]{
\draw (#1) node [draw=none,fill=#2,shape=circle,minimum width=2cm] (#3) {
\begin{tikzpicture}
\node [draw=white, fill=white,shape=cylinder,shape aspect=1.3 ,shape border rotate=90,minimum height=1.6cm,minimum width=1.5cm] at (0,0) (Cylinder) {};				\draw[draw=#2,very thick,line width=0.1cm,anchor=north west] ($(Cylinder.north west) +(-0.05cm,-0.1cm)$) arc (-180:0:0.8cm and 0.2cm); 
\draw[draw=#2,very thick,line width=0.1cm,anchor=north west] ($(Cylinder.north west) +(-0.05cm,-0.5cm)$) arc (-180:0:0.8cm and 0.2cm); 
\draw[draw=#2,very thick,line width=0.1cm,anchor=north west] ($(Cylinder.north west) +(-0.05cm,-0.9cm)$) arc (-180:0:0.8cm and 0.2cm); 
\end{tikzpicture}
};
}

% Define dirtree
\makeatletter
\newcount\dirtree@lvl
\newcount\dirtree@plvl
\newcount\dirtree@clvl
\def\dirtree@growth{%
\ifnum\tikznumberofcurrentchild=1\relax
\global\advance\dirtree@plvl by 1
\expandafter\xdef\csname dirtree@p@\the\dirtree@plvl\endcsname{\the\dirtree@lvl}
\fi
\global\advance\dirtree@lvl by 1\relax
\dirtree@clvl=\dirtree@lvl
\advance\dirtree@clvl by -\csname dirtree@p@\the\dirtree@plvl\endcsname
\pgf@xa=0.25cm\relax
\pgf@ya=-0.5cm\relax
\pgf@ya=\dirtree@clvl\pgf@ya
\pgftransformshift{\pgfqpoint{\the\pgf@xa}{\the\pgf@ya}}%
\ifnum\tikznumberofcurrentchild=\tikznumberofchildren
\global\advance\dirtree@plvl by -1
\fi
}

\tikzset{
dirtree/.style={
growth function=\dirtree@growth,
every node/.style={anchor=north},
every child node/.style={anchor=west},
edge from parent path={(\tikzparentnode\tikzparentanchor) |- (\tikzchildnode\tikzchildanchor)}
}
}
\makeatother

\newcommand{\file}[3] {
\coordinate (#3) at (#1);
\draw [anchor=top left](#1) rectangle ++(1.5,-2);
\draw [fill=color_workspace]($(#1) +(1.5,0)$) -- ++(0,-0.5) --++(-0.5,0.5) -- cycle; 
\node [anchor=north west,fileText] at ($(#1) +(0,-0.5)$) {#2};
}
\begin{tikzpicture}
\state{0,0}{color_workspace}{W}
\node[TARGET,fill=white] at ($(W.north) +(0,0.5cm)$) {Workspace};
\state{6,0}{color_index}{I}
\node[TARGET,fill=white] at ($(I.north) +(0,0.5cm)$) {Staging Area};
\state{12,0}{color_local}{L}
\node[TARGET,fill=white] at ($(L.north) +(0,0.5cm)$) {Local Repository};

\draw[{Round Cap[length=0.5em]}-Triangle Cap,very thick, line width=1cm, draw=color_index] ($(W.east) + (0.1cm,0)$) -- ($(I.west) + (-0.1cm,0)$) node[anchor=center,pos=0.5, text=black,align=center,CODE] {add};

\draw[{Round Cap[length=0.5em]}-Triangle Cap,very thick, line width=1cm, draw=color_local] ($(I.east) + (0.1cm,0)$) -- ($(L.west) + (-0.1cm,0)$) node[anchor=center,pos=0.5, text=black,align=center,CODE] {commit};

\node [anchor=north west] at ($(W) +(-1cm,-1cm)$)  (W0) {
\begin{tikzpicture}[dirtree,TREE]
\node {} 
child { node {file 3}}
child [text=color_workspace]{node {file 2}}
child [text=color_workspace]{ node {file 1}};
\end{tikzpicture}
};
%\draw[decorate,decoration={brace,amplitude=5pt},very thick] ($(W0.north) + (-1cm,-1cm)$)  -- ($(W0.south) + (-1cm,0.2cm)$);

\node [anchor=north west] at ($(I) +(-1cm,-1cm)$)  (W0) {
\begin{tikzpicture}[dirtree,TREE,color=gray,text=gray]
\node {} 
child { node {file 3}}
child {node {file 2}}
child {node {file 1}};
\end{tikzpicture}
};


\node [anchor=north west] at ($(L) +(-1cm,-1cm)$)  (L0) {
\begin{tikzpicture}[dirtree,TREE]
\node {} 
child { node {file 3}}
child {node {file 2}}
child { node {file 1}};
\end{tikzpicture}
};
\draw[decorate,decoration={brace,amplitude=5pt},very thick] ($(L0.north) + (1.3cm,-0.4cm)$)  -- ($(L0.south) + (1.3cm,0.2cm)$);
\node [TREE,anchor=west] at ($(L0) +(1.5,-0.1)$) {committed snapshot 2}; 
 
\node [anchor=north west] at ($(L0) +(-1.2cm,-1cm)$)  (L1) {
\begin{tikzpicture}[dirtree,TREE]
\node {} 
child {node {file 2}}
child { node {file 1}};
\end{tikzpicture}
};
\draw[decorate,decoration={brace,amplitude=5pt},very thick] ($(L1.north) + (1.3cm,-0.4cm)$)  -- ($(L1.south) + (1.3cm,0.2cm)$);
\node [TREE,anchor=west] at ($(L1) +(1.5,-0.1)$) {committed snapshot 1};  
\end{tikzpicture}
```

Initially, it might seem that there is an awful lot of duplication
going on. For example, if we make a minor alteration to a file, why
not just commit the change (delta) instead of an entirely new copy?
Well, periodically, git will perform **garbage collection** on the
repository. This process **repacks** the objects together into a
single object that comprises only the original blobs and their
subsequent deltas - thereby gaining efficiency. The process of garbage
collection can also be forced at any time via:

```{bash}
#| label: gitgc
#| echo: true
#| eval: false
#| classes: bash
#| highlight-style: zenburn
git gc
```

During the evolution of most projects, situations arise in which we
wish to start work on new components or features that might represent
a substantial deviation from the main line of evolution. Often, we
would very much like to be able to quarantine the main thread of the
project from these new developments. For example, we may wish to be
able to continue tweaking the main project files (in order to address
minor issues and bugs), while at the same time, performing major edits
that take the project in a different direction.

This is called _branching_. The main evolutionary thread of the
project is referred to as the **main** _branch_. Deviations
from the _main branch_ are generally called **branches** and
can be given any name (other than 'main' or 'HEAD'). For example, we
could start a new _branch_ called 'Feature' where we can evolve
the project in one direction whilst still being able to actively
develop the _main branch_ at the same time. 'Feature' and
'main' _branches_ are depicted in the left hand sequence of
circles of the schematic below.

```{tikz}
%| label: Fig-overview
%| engine: tikz
%| echo: false
%| cache: true
%| dependson: common
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"
\input{resources/common.tikz}
\tikzstyle{TARGET} = [font={\fontspec[Scale=2]{NotoSans-Regular}}]
\tikzstyle{refText} = [font={\fontspec[Scale=1.5]{InconsolataSemiCondensed-Regular}}]
\begin{tikzpicture}

\commit{}{A}{color_inactive}{}{}
\commit{right = 1cm of A}{B}{color_inactive}{}{}
\commit{right = 1cm of B}{C}{color_commit}{}{}
\draw [-,line width=3pt,draw=black!60] (A) -- ++(-1,0);
\draw [-,line width=3pt,draw=black!60] (B) -- (A);
\draw [-,line width=3pt,draw=black!60] (C) -- (B);
\commit{above = 0.5cm of B}{D}{color_inactive}{}{}
\draw [-,line width=3pt,draw=black!60] (A.east) to[out=0,in=180] (D);
\master{right = 0.5cm of C}\draw[->,line width=3pt,draw=black!60] (master) -- (C);
\HEAD{right = 0.5cm of master}\draw[->,line width=3pt,draw=black!60] (HEAD) -- (master);
\branch{right = 0.5cm of D}{Feature}\draw[->,line width=3pt,draw=black!60] (Feature) -- (D);

\rcommit{right = 3cm of HEAD}{rA}{color_inactive}{}{}
\rcommit{right = 1cm of rA}{rB}{color_inactive}{}{}
\rcommit{right = 1cm of rB}{rC}{color_inactive}{}{}
\rcommit{right = 1cm of rC}{rC2}{color_commit}{}{}
\draw [-,line width=3pt,draw=black!60] (rA) -- ++(-1,0);
\draw [-,line width=3pt,draw=black!60] (rB) -- (rA);
\draw [-,line width=3pt,draw=black!60] (rC) -- (rB);
\draw [-,line width=3pt,draw=black!60] (rC2) -- (rC);

\rcommit{above = 0.5cm of rB}{rD}{color_inactive}{}{}
\draw [-,line width=3pt,draw=black!60] (rA.east) to[out=0,in=180] (rD);
\rmaster{right = 0.5cm of rC2}\draw[->,line width=3pt,draw=black!60] (rmaster) -- (rC2);
\branch{right = 0.5cm of rD}{origin/Feature}\draw[->,line width=3pt,draw=black!60] (origin/Feature) -- (rD);
\rcommit{below = 0.5cm of rB}{rE}{color_inactive}{}{}
\draw [-,line width=3pt,draw=black!60] (rA.east) to[out=0,in=180] (rE);
\branch{right = 0.5cm of rE}{origin/dev}\draw[->,line width=3pt,draw=black!60] (origin/dev) -- (rE);
\rHEAD{right = 0.5cm of rmaster}\draw[->,line width=3pt,draw=black!60] (rHEAD) -- (rmaster);

\state{$(A) +(0,3cm)$}{color_local}{L}
\node[TARGET,fill=white] at ($(L.north) +(0,0.5cm)$) {Local Repository};

\state{$(rA) +(0,3cm)$}{color_remote}{R}
\node[TARGET,fill=white] at ($(R.north) +(0,0.5cm)$) {Remote Repository};

\end{tikzpicture}
```

The circles represent **commits** (stored snapshots). We can see that
the first commit is the common ancestor of the 'Feature' and 'main'
_branch_. **HEAD** is a special reference that points to the _tip_ of
the currently active _commit_. It indicates where the next _commit_
will be built onto. In diagram above, `HEAD` is pointing to the last
_commit_ in `main`. Hence the next _commit_ will build on this
_commit_. To develop the `Feature` _branch_ further, we first have to
move `HEAD` to the tip of the `Feature` _branch_.

We can later `merge` the `Feature` _branch_ into the `main` _branch_
in order to make the new changes mainstream.

To support collaboration, there can also be a _remote repository_
(referred to as **origin** and depicted by the squares in the figure
above). Unlike a _local repository_, a _remote repository_ does not
contain a _workspace_ as files are not directly edited in the _remote
repository_. Instead, the _remote repository_ acts as a permanently
available conduit between multiple contributors.

In the diagram above, we can see that the _remote repository_
(`origin`) has an additional _branch_ (in this called `dev`). The
collaborator whose _local repository_ is depicted above has either not
yet obtained (**pulled**) this _branch_ or has elected not to (as
perhaps it is not a direction that they are involved in).

We also see that the `main` _branch_ on the _remote repository_ has a
newer (additional) _commit_ than the _local repository_.

Prior to working on _branch_ a collaborator should first get any
updates to the _remote repository_. This is a two step process.
Firstly, the collaborator **fetches** any changes and then secondly
**merges** those changes into their version of the _branch_.
Collectively, these two actions are called a **pull**.

To make local changes available to others, the collaborator can
**push** _commits_ up to the _remote repository_. The _pushed_ changes
are applied directly to the nominated _branch_ so it is the users
responsibility to ensure as much as possible, their local repository
already included the most recent _remote repository_ changes (by
always _pulling_ before _pushing_).

```{tikz}
%| label: Fig-git
%| engine: tikz
%| echo: false
%| cache: true
%| dependson: common
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"
\input{resources/common.tikz}

\usetikzlibrary{arrows.meta}
\tikzstyle{CODE} = [font={\fontspec[Scale=2]{InconsolataSemiCondensed-Regular}}] 
\tikzstyle{TARGET} = [font={\fontspec[Scale=2]{NotoSans-Regular}}]
\tikzstyle{refText} = [font={\fontspec[Scale=1.5]{InconsolataSemiCondensed-Regular}}]
\begin{tikzpicture}

\coordinate (R1) at (0,8cm);
\coordinate (R2) at (0,6cm);
\coordinate (R3) at (0,4cm);
\coordinate (R4) at (0,2cm);
\coordinate (R5) at (0,0cm);
\coordinate (R6) at (0,-3cm);
\coordinate (R7) at (0,-6cm);
\coordinate (R8) at (0,-6cm);
\coordinate (R8) at (0,-8cm);
\coordinate (R9) at (0,-10cm);
\coordinate (R10) at (0,-12cm);
\coordinate (R11) at (0,-14cm);

\coordinate (C1) at (0cm,-2cm);
\coordinate (C2) at (8cm,-2cm);
\coordinate (C3) at (16cm,-2cm);
\coordinate (C4) at (24cm,-2cm);

\definecolor{color_workspace}{rgb}{0.12,0.6,0.51}
\definecolor{color_index}{rgb}{0.78,0.86,0.27}
\definecolor{color_local}{rgb}{0.9,0.9,0.2}
\definecolor{color_remote}{rgb}{1,0.55,0.15}

\draw [line width=0.1cm,draw=color_workspace] (C1.west |- R1.north) -- (C1.west |- R11.south); 
\node [draw=none,fill=color_workspace,shape=circle,minimum width=2cm] at (C1) (W) {
\begin{tikzpicture}
\node [draw=white, fill=white,shape=cylinder,shape aspect=1.3 ,shape border rotate=90,minimum height=1.6cm,minimum width=1.5cm] at (0,0) (Cylinder) {};
\draw[draw=color_workspace,very thick,line width=0.1cm,anchor=north west] ($(Cylinder.north west) +(-0.05cm,-0.1cm)$) arc (-180:0:0.8cm and 0.2cm); 
\draw[draw=color_workspace,very thick,line width=0.1cm,anchor=north west] ($(Cylinder.north west) +(-0.05cm,-0.5cm)$) arc (-180:0:0.8cm and 0.2cm); 
\draw[draw=color_workspace,very thick,line width=0.1cm,anchor=north west] ($(Cylinder.north west) +(-0.05cm,-0.9cm)$) arc (-180:0:0.8cm and 0.2cm); 
\end{tikzpicture}	
};
\node[TARGET,fill=white] at ($(W.south) +(0,-0.5cm)$) {Workspace};

\draw [line width=0.1cm,draw=color_index] (C2.west |- R1.north) -- (C2.west |- R11.south); 
\node [draw=none,fill=color_index,shape=circle,minimum width=2cm] at (C2) (I) {
\begin{tikzpicture}
\node [draw=white, fill=white,shape=cylinder,shape aspect=1.3 ,shape border rotate=90,minimum height=1.6cm,minimum width=1.5cm] at (0,0) (Cylinder) {};
\draw[draw=color_index,very thick,line width=0.1cm,anchor=north west] ($(Cylinder.north west) +(-0.05cm,-0.1cm)$) arc (-180:0:0.8cm and 0.2cm); 
\draw[draw=color_index,very thick,line width=0.1cm,anchor=north west] ($(Cylinder.north west) +(-0.05cm,-0.5cm)$) arc (-180:0:0.8cm and 0.2cm); 
\draw[draw=color_index,very thick,line width=0.1cm,anchor=north west] ($(Cylinder.north west) +(-0.05cm,-0.9cm)$) arc (-180:0:0.8cm and 0.2cm); 
\end{tikzpicture}	
};
\node[TARGET,fill=white] at ($(I.south) +(0,-0.5cm)$) {Staging area (Index)};

\draw [line width=0.1cm,draw=color_local] (C3.west |- R1.north) -- (C3.west |- R11.south);
\node [draw=none,fill=color_local,shape=circle,minimum width=2cm] at (C3) (L) {
\begin{tikzpicture}
\node [draw=white, fill=white,shape=cylinder,shape aspect=1.3 ,shape border rotate=90,minimum height=1.6cm,minimum width=1.5cm] at (0,0) (Cylinder) {};
\draw[draw=color_local,very thick,line width=0.1cm,anchor=north west] ($(Cylinder.north west) +(-0.05cm,-0.1cm)$) arc (-180:0:0.8cm and 0.2cm); 
\draw[draw=color_local,very thick,line width=0.1cm,anchor=north west] ($(Cylinder.north west) +(-0.05cm,-0.5cm)$) arc (-180:0:0.8cm and 0.2cm); 
\draw[draw=color_local,very thick,line width=0.1cm,anchor=north west] ($(Cylinder.north west) +(-0.05cm,-0.9cm)$) arc (-180:0:0.8cm and 0.2cm); 
\end{tikzpicture}	
};
\node[TARGET,fill=white] at ($(L.south) +(0,-0.5cm)$) {Local Repository};

\draw [line width=0.1cm,draw=color_remote] (C4.west |- R1.north) -- (C4.west |- R11.south);
\node [draw=none,fill=color_remote,shape=circle,minimum width=2cm] at (C4) (R) {
\begin{tikzpicture}
\node [draw=white, fill=white,shape=cylinder,shape aspect=1.3 ,shape border rotate=90,minimum height=1.6cm,minimum width=1.5cm] at (0,0) (Cylinder) {};
\draw[draw=color_remote,very thick,line width=0.1cm,anchor=north west] ($(Cylinder.north west) +(-0.05cm,-0.1cm)$) arc (-180:0:0.8cm and 0.2cm); 
\draw[draw=color_remote,very thick,line width=0.1cm,anchor=north west] ($(Cylinder.north west) +(-0.05cm,-0.5cm)$) arc (-180:0:0.8cm and 0.2cm); 
\draw[draw=color_remote,very thick,line width=0.1cm,anchor=north west] ($(Cylinder.north west) +(-0.05cm,-0.9cm)$) arc (-180:0:0.8cm and 0.2cm); 
\end{tikzpicture}	
};
\node[TARGET,fill=white] at ($(R.south) +(0,-0.5cm)$) {Remote Repository};

\draw[{Round Cap[length=0.5em]}-Triangle Cap,very thick, line width=1cm, draw=color_index] ($(C1.west |- R2.south) + (0.1cm,0)$) -- ($(C2.west |- R2.south) + (-0.1cm,0)$) node[anchor=west,pos=0, text=black,align=center,CODE] {git rm / git mv};
\draw[{Round Cap[length=0.5em]}-Triangle Cap,very thick, line width=1cm, draw=color_index] ($(C1.west |- R3.south) + (0.1cm,0)$) -- ($(C2.west |- R3.south) + (-0.1cm,0)$) node[anchor=west,pos=0, text=black,align=center,CODE] {git add};
\draw[{Round Cap[length=0.5em]}-Triangle Cap,very thick, line width=1cm, draw=color_local] ($(C2.west |- R3.south) + (0.1cm,0)$) -- ($(C3.west |- R3.south) + (-0.1cm,0)$) node[anchor=west,pos=0, text=black,align=center,CODE] {git commit};
\draw[{Round Cap[length=0.5em]}-Triangle Cap,very thick, line width=1cm, draw=color_remote] ($(C3.west |- R3.south) + (0.1cm,0)$) -- ($(C4.west |- R3.south) + (-0.1cm,0)$) node[anchor=west,pos=0, text=black,align=center,CODE] {git push};

\draw[{Round Cap[length=0.5em]}-Triangle Cap,very thick, line width=1cm, draw=color_remote] ($(C4.west |- R7.south) + (-0.1cm,0)$) -- ($(C1.west |- R7.south) + (0.1cm,0)$) node[anchor=east,pos=0, text=black,CODE] {git pull / git reset --hard <remote/branch>};
\draw[{Round Cap[length=0.5em]}-Triangle Cap,very thick, line width=1cm, draw=color_remote] ($(C4.west |- R8.south) + (-0.1cm,0)$) -- ($(C3.west |- R8.south) + (0.1cm,0)$) node[anchor=east,pos=0, text=black,CODE] {git fetch};
\draw[{Round Cap[length=0.5em]}-Triangle Cap,very thick, line width=1cm, draw=color_local] ($(C3.west |- R8.south) + (-0.1cm,0)$) -- ($(C1.west |- R8.south) + (0.1cm,0)$) node[anchor=east,pos=0, text=black,CODE] {git merge / git rebase};
\draw[{Round Cap[length=0.5em]}-Triangle Cap,very thick, line width=1cm, draw=color_workspace] ($(C3.west |- R9.south) + (-0.1cm,0)$) -- ($(C1.west |- R9.south) + (0.1cm,0)$) node[anchor=east,pos=0, text=black,CODE] {git checkout HEAD / git reset --hard};
\draw[{Round Cap[length=0.5em]}-Triangle Cap,very thick, line width=1cm, draw=color_index] ($(C3.west |- R10.south) + (-0.1cm,0)$) -- ($(C2.west |- R10.south) + (0.1cm,0)$) node[anchor=east,pos=0, text=black,CODE] {git reset --soft};
\draw[{Round Cap[length=0.5em]}-Triangle Cap,very thick, line width=1cm, draw=color_workspace] ($(C2.west |- R10.south) + (-0.1cm,0)$) -- ($(C1.west |- R10.south) + (0.1cm,0)$) node[anchor=east,pos=0, text=black,CODE] {git checkout};

\draw[Triangle Cap-Triangle Cap,very thick, line width=1cm, draw=color_index!40] ($(C2.west |- R4.south) + (-0.1cm,0)$) -- ($(C1.west |- R4.south) + (0.1cm,0)$) node[anchor=center,pos=0.5, text=black,CODE] {git diff};
\draw[Triangle Cap-Triangle Cap,very thick, line width=1cm, draw=color_local!40] ($(C3.west |- R5.south) + (-0.1cm,0)$) -- ($(C1.west |- R5.south) + (0.1cm,0)$) node[anchor=center,pos=0.5, text=black,CODE] {git diff HEAD};

\node[rounded corners,CODE,fill=color_workspace,minimum height=1cm] at ($(R1) +(0,1.5cm)$)  (init) {git init};
\draw[line width=1cm,draw=color_workspace,-{Triangle Cap[cap angle=60,length=0.3cm]}] ($(init.south) +(0,-0.3cm)$) -- +(0,-0.5cm);

\node[rounded corners,CODE,fill=color_remote,minimum height=1cm] at ($(C4 |- R1) +(0,1.5cm)$)  (initbare) {git init --bare};
\draw[line width=1cm,draw=color_remote,-{Triangle Cap[cap angle=60,length=0.3cm]}] ($(initbare.south) +(0,-0.3cm)$) -- +(0,-0.5cm);

\end{tikzpicture}
```

# Installation

::: panel-tabset 

## Windows

Git Bash (Command Line Version):

1. Download the Git for Windows installer from [Git for Windows](https://gitforwindows.org/)
   - Click the Download button
   - Select the latest version from the list of `Assets`
2. Run the installer and follow the installation prompts.
3. Choose the default options unless you have specific preferences.
4. Select the default text editor (usually Vim) or choose another
   editor like Nano or Notepad++.
5. Choose to use Git from the Windows Command Prompt (recommended).
6. Complete the installation.

## MacOSx

Using Homebrew:

1. Open Terminal.
2. Install Homebrew if not installed:

:::: {.indented}
```{bash}
#| label: install1
#| echo: true
#| eval: false
#| cache: false
#| engine: bash
#| classes: bash
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
```
:::

3. Install Git using Homebrew:

:::: {.indented}

```{bash}
#| label: install2
#| echo: true
#| eval: false
#| cache: false
#| engine: bash
#| classes: bash
brew install git
```
::::

## Linux

1. Open Terminal.

:::: {.indented}
Ubuntu/Debian:

```{bash}
#| label: install3a
#| echo: true
#| eval: false
#| cache: false
#| engine: bash
#| classes: bash
sudo apt update
sudo apt install git
```
::::

:::: {.indented}
Fedora:

```{bash}
#| label: install3b
#| echo: true
#| eval: false
#| cache: false
#| engine: bash
#| classes: bash
sudo dnf install git
```
::::

:::: {.indented}
Arch Linux:

```{bash}
#| label: install3c
#| echo: true
#| eval: false
#| cache: false
#| engine: bash
#| classes: bash
sudo pacman -S git
```
::::

:::: {.indented}
Linux (Red Hat/CentOS):

```{bash}
#| label: install3d
#| echo: true
#| eval: false
#| cache: false
#| engine: bash
#| classes: bash
sudo yum install git
```
::::
:::


To verify that the software is installed and accessible, open a
terminal and issue the following:

```{bash}
#| label: install4a
#| echo: true
#| eval: true
#| cache: false
#| engine: bash
#| classes: bash
git --version
```

::: {.callout-tip collapse="true"}
## Unsure how to open a terminal?

**Windows:**

On Windows, you can access a terminal via one of the following: 

- via the command Prompt:
  - Press `Win + R` to open the Run dialog.
  - Type `cmd` and press `Enter`.

- via PowerShell:
  - Press `Win + X` and select "Windows PowerShell."

- Git Bash (Optional):
  - if Git is installed (which we are hoping it is!), open "Git Bash" for a Unix-like terminal experience.

**MacOS:**

- via Terminal:
  - Press `Cmd + Space` to open Spotlight.
  - Type `terminal` and press `Enter`.

**Linux:**

Oh please. You cannot seriously tell me that you are using Linux and
don't know how to access a terminal.
:::

In the command above, pay particular attention to the number of
hyphens in the above command - there are two in a row and no spaces
between the `--` and the word `version`.

If you get output similar to above (an indication of what version of
git you have on your system), then it is likely to be properly
installed. If instead you get an error message, then it is likely that
git is not properly installed and you should try again.

# Getting started


Before using git, it is a good idea to define some global (applied to
all your gits) settings. These include your name and email address and
whilst not essential, they are applied to all actions you perform so
the it is easier for others to track the route of changes etc.

```{bash}
#| label: git-config
#| echo: true
#| eval: false
#| cache: false
#| classes: bash
#| engine: bash
git config --global user.name "Your Name"
git config --global user.email "your_email@whatever.com"
```

::: {.callout-note}
In the above, you should replace "Your Name" with your actual name.
This need not be a username (or even a real name) it is not cross
referenced anywhere. It is simply to use in collaboration so that your
collaborators know who is responsible for your commits.

Similarly, you should replace "your_email@whatever.com" with an email
that you are likely to monitor. This need not be the same email
address you have used to register a Github account etc, it is just so
that collaborators have a way of contacting you.
:::


The remaining sections go through the major git versioning concepts.
As previously indicated, git is a command driven program (technically
a family of programs). Nevertheless, many other applications (such as
RStudio) are able to interface directly with git for some of the more
commonly used features. Hence, in addition to providing the command
line syntax for performing each task, where possible, this tutorial
will also provide instructions (with screen captures) for RStudio and
emacs.

# Setting up (initializing) a new repository

For the purpose of this tutorial, I will create a temporary folder the
`tmp` _folder_ of my `home` _directory_ into which to create and
manipulate repositories. To follow along with this tutorial, you are
encouraged to do similarly.


## Initialize local repository

```{tikz}
%| label: Fig1a
%| engine: tikz
%| echo: false
%| cache: true
%| dependson: common
%| include: false
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"
\input{resources/common.tikz}
\tikzstyle{refText} = [font={\fontspec[Scale=1.5]{InconsolataSemiCondensed-Regular}}]
\begin{tikzpicture}
\commit{}{A}{white}{}{}
\draw [-,line width=3pt,draw=black!60] (A) -- ++(-1,0);
\master{right = 0.5cm of A}\draw[->,line width=3pt,draw=black!60] (master) -- (A);
\HEAD{right = 0.5cm of master}\draw[->,line width=3pt,draw=black!60] (HEAD) -- (master);
\end{tikzpicture} 
```
```{bash}
#| label: Fig1a-conv
#| echo: false
convert -trim +repage -density 300 -resize 20% 10_git_files/figure-html/Fig1a-1.pdf 10_git_files/figure-html/Fig1a-1.png 
```

![](10_git_files/figure-html/Fig1a-1.png)

::: {.panel-tabset}

## Terminal

We will start by creating a new directory (folder) which we will call
`Repo1` in which to place our repository. All usual directory naming
rules apply since it is just a regular directory.

```{R}
#| label: makedirectory1
#| cache: false
#| echo: false
if (!dir.exists("~/tmp")) dir.create("~/tmp")
unlink('~/tmp/Repo1', recursive=TRUE, force=TRUE)
```
 
```{bash}
#| label: makedirectory
#| echo: true
#| cache: false
#| engine: bash
#| classes: bash
mkdir ~/tmp/Repo1
```

To create (or initialize) a new local repository, issue the `git
init` _command_ in the root of the working directory you
wish to contain the git repository. This can be either an empty
directory or contain an existing directory/file structure. The
`git init` _command_ will add a folder called
`.git` to the directory. <b>This is a one time
operation</b>.

```{bash}
#| label: git-init
#| echo: true
#| eval: true
#| cache: false
#| classes: bash
#| engine: bash
cd ~/tmp/Repo1
git init 
```

The `.git` _folder_ contains all the necessary
_metadata_ to manage the repository.

```{bash}
#| label: git-initD
#| echo: !expr -1
#| eval: true
#| cache: false
#| classes: bash
#| engine: bash
cd ~/tmp/Repo1	
ls -al
```
```{bash}
#| label: git-initD2
#| echo: !expr -1
#| eval: true
#| cache: false
#| classes: bash
#| engine: bash
cd ~/tmp/Repo1	
tree -a --charset unicode
```

config
: this file stores settings such as the location of a remote
  repository that this repository is linked to.

description
: lists the name (and version) of a repository

HEAD
: lists a reference to the current checked out commit.

hooks
: a directory containing scripts that are executed at various stages
  (e.g. `pre-push.sample` is an example of a script executed prior to
  pushing)

info
: contains a file `exclude` that lists exclusions (files not to be
  tracked). This is like `.gitignore`, except is not versioned.

objects
: this directory contains SHA indexed files being tracked

refs
: a master copy of all the repository refs

logs
: contains a history of each branch

## RStudio

The repository that we are going to create in this demonstration could
be considered to be a new standalone analysis. In Rstudio, this would
be considered a **project**. So, we will initialise the git repository
while we create a new Rstudio project.  To do so:

1. click on the `Project` selector in the top right of the Rstudio
   window (as highlighted by the red ellipse in the image below.

   ![](resources/rstudio_init1a.png){width=100%}

2. select `New Project` from the dropdown menu
3. select `New Directory` form the Create Project panel
4. select `New Project` from the Project Type panel
5. Provide a name for the new directory to be created and use the
   `Browse` button to locate a suitable position for this new
   directory. **Ensure that the `Create a git repository` checkbox is
   checked**

   ![](resources/rstudio_init2.png){width=50%}
6. Click the `Create Project` button

If successful, you should notice a couple of changes - these are
highlighted in the following figure:

![](resources/rstudio_init3a.png){width=60%}

- a new `Git` tab will appear in the top right panel
- the contents of this newly created project/repository will appear in
  the `Files` tab of the bottom right panel
  
If the files and directories that begin with a `.` do not appear,
click on the `More file commands` cog and make sure the `Show Hidden
Files` option is ticked.

The newly created files/folders are:

- `.git` - this directory houses the repository information and should
  not generally be edited directly
- `.gitignore` - this file defines files/folders to be excluded from
  the repository. We will discuss this file more later
- `.Rhistory` - this file will accrue a history of the commands you
  have evaluated in R within this project
- `.Rproj.user` - this folder stores some project-specific temporary
  files
- `Repo1.Rproj` - contains the project specific settings

**Note that on the left side of the Rstudio window there are two
panels - one called "Console", the other called "Terminal". The
console window is for issuing R commands and the terminal window is
for issuing system (bash, shell) commands. Throughout this tutorial,
as an alternative to using the point and click Rstudio methods, you
could instead issue the `Terminal` instructions into the "Terminal"
panel. Indeed, there are some git commands that are not supported
directly by Rstudio and can only be entered into the terminal**

## Emacs (magit)

:::


Note, at this stage, no files are being tracked, that is, they are not
part of the repository.

To assist in gaining a greater understanding of the workings of git,
we will use a series of schematics diagrams representing the contents
of four important sections of the repository. Typically, these figures
will be contained within callout panels that expand/collapse upon
clicking.  However, for this first time, they will be standalone.

In the first figure below, the left hand panel represents the contents
of the root directory (excluding the `.git` folder) - this is the
_workspace_ and is currently empty.

The three white panels represent three important parts of the inner
structure of the `.git` folder. A newly initialized repository is
relatively devoid of any specific metadata since there are no staged
or committed files. In the root of the `.git` folder, there is a file
called `HEAD`.

The figure is currently very sparse. However, as the repository grows,
so the figure will become more complex.

```{tikz}
%| label: Fig-advanced1
%| engine: tikz
%| echo: false
%| cache: true
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"

\usetikzlibrary{arrows.meta}

\definecolor{color_workspace}{rgb}{0.12,0.6,0.51}
\definecolor{color_tree}{HTML}{9ACD32} %\definecolor{color_tree}{rgb}{0.78,0.86,0.27}
\definecolor{color_commit}{rgb}{0.9,0.9,0.2}
\definecolor{color_remote}{rgb}{1,0.55,0.15}
\definecolor{color_master}{rgb}{0.36,0.27,0.87}
\definecolor{color_head}{HTML}{6495ED}
\definecolor{color_index}{HTML}{E0FFFF} %\definecolor{color_index}{rgb}{1,1,1}
\definecolor{color_file}{rgb}{0.8,0.8,0.8}

\tikzstyle{TARGET} = [font={\fontspec[Scale=2]{NotoSans-Regular}}] 
\tikzstyle{CODE} = [font={\fontspec[Scale=2]{InconsolataSemiCondensed-Regular}}] 
\tikzstyle{TREE} = [font={\fontspec[Scale=1.5]{InconsolataSemiCondensed-Regular}}] 
\tikzstyle{fileText} = [font={\fontspec[Scale=1.1]{InconsolataSemiCondensed-Regular}}] 

%Define a file 
\newcommand{\file}[4] {
\def\corner{0.15in};
\def\cornerradius{0.02in};
\def\lwidth{0.02in};
\def\h{0.5in};
\def\w{0.85in};
\def\nline{0};
\def\iconmargin{0.1in};
\def\topmargin{0.3in};
\node at (#1) {\begin{tikzpicture}
\coordinate (nw) at ($(-0.05in*1,-0.15in*1)$);
\coordinate (#3) at (#1); 
\coordinate (ne0) at ($(nw) + (\w, 0)$);
\coordinate (ne1) at ($(ne0) - (\corner, 0)$);
\coordinate (ne2) at ($(ne0) - (0, \corner)$);
\coordinate (se) at ($(ne0) + (0, -\h)$); 
\filldraw [-, line width = \lwidth, fill=#4] (nw) -- (ne1) -- (ne2)
[rounded corners=\cornerradius]--(se) -- (nw|-se) -- cycle;
\draw [-, line width = \lwidth] (ne1) [rounded corners=\cornerradius]-- (ne1|-ne2) -- (ne2);
\node [anchor=north west,TREE] at (nw) {#2};
\foreach \k in {0,...,\nline}
{
\draw [-, line width = \lwidth, line cap=round] 
($(nw|-se) + (\iconmargin,\iconmargin) + (0,{(\k-1)/(\nline-1)*(\h - \iconmargin - \topmargin)})$)
-- ++ ($(\w,0) - 2*(\iconmargin,0)$);
}
\end{tikzpicture}};
}
% end of file definition

\begin{tikzpicture}

\coordinate (G_ul) at (0,0);
\coordinate (G_ll) at ($(G_ul) +(0,-10)$);
\coordinate (G_lr) at ($(G_ll) +(4,0)$);
\coordinate (G_ur) at ($(G_ul) +(4,0)$);

\node[TREE,anchor=west] at ($(G_ul) +(0,-0.5)$) (git) {.git/};
\file{$(git.west) +(1.5,-2)$}{HEAD}{HEAD}{color_head}

\draw (G_ul) -- (G_ll) -- (G_lr) -- (G_ur) -- cycle;


%refs
\node[TREE,anchor=west] at ($(G_ul) +(-5,-0.5)$) (git_ref) {.git/refs/};
\draw[] ($(G_ul) +(-5,0)$) -- ++(0,-10) -- ++(4.9,0) -- ++(0,10) -- cycle;

%objects
\node[TREE,anchor=west] at ($(G_ul) +(-17,-0.5)$) (git_object) {.git/objects/};
\draw[] ($(G_ul) +(-17,0)$) -- ++(0,-10) -- ++(11.9,0) -- ++(0,10) -- cycle;

%files
\node[TREE,anchor=west] at ($(G_ul) +(-21,-0.5)$) (root) {/};
\begin{pgfonlayer}{background}
\draw[fill=color_workspace!20] ($(G_ul) +(-21,0)$) -- ++(0,-10) -- ++(3.9,0) -- ++(0,10) -- cycle;
\end{pgfonlayer}

\end{tikzpicture}
```

The second figure provides the same information, yet via a network
diagram. Again, this will not be overly meaningful until the
repository contains some content.

```{bash}
#| label: gitDraw1
#| engine: bash
#| echo: false
./resources/git-draw --image-only --sha1-length 5 --hide-legend --hide-reflogs --git-dir ~/tmp/Repo1/.git --image-filename 10_git_files/figure-html/drawGit1.png 
```

![](10_git_files/figure-html/drawGit1.png)

## Initializing other types of repositories

The above demonstrated how to initialise a new local repository from
scratch.  However, there are times when we instead want to:

- create a git repository from an existing directory or project
- collaborate with someone on an existing repository
- create a remote repository

These situations are briefly demonstrated in the following sections.

### Initializing a shared (remote) repository

```{tikz}
%| label: Fig1b
%| engine: tikz
%| echo: false
%| cache: true
%| dependson: common
%| include: false
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"
\input{resources/common.tikz}
\tikzstyle{refText} = [font={\fontspec[Scale=1.5]{InconsolataSemiCondensed-Regular}}]
\begin{tikzpicture}
\rcommit{}{A}{white}{}{}
\draw [-,line width=3pt,draw=black!60] (A) -- ++(-1,0);
\master{right = 0.5cm of A}\draw[->,line width=3pt,draw=black!60] (master) -- (A);
\HEAD{right = 0.5cm of master}\draw[->,line width=3pt,draw=black!60] (HEAD) -- (master);
\end{tikzpicture} 
```
```{bash}
#| label: Fig1b-conv
#| echo: false
convert -trim +repage -density 300 -resize 20% 10_git_files/figure-html/Fig1b-1.pdf 10_git_files/figure-html/Fig1b-1.png 
```

![](10_git_files/figure-html/Fig1b-1.png)

The main repository for sharing should not contain the working
directory as such - only the `.git` tree and the
`.gitignore` file. Typically the point of a remote
repository is to act as a perminantly available repository from which
multiple uses can exchange files. Consequently, those accessing this
repository should only be able to interact with the .git
_metadata_ - they do not directly modify any files.

Since a remote repository is devode of the working files and
directories, it is referred to as _bare_. 

::: {.panel-tabset}

#### Terminal
To create a _bare_ remote repository, issue the `git init --bare`
_command_ after logging in to the remote location.

```{bash}
#| label: git-initB
#| echo: true
#| eval: false
#| cache: false
#| classes: bash
#| engine: bash
git init --bare
```

#### Rstudio

Use the instructions for the `Terminal`

:::


### Cloning an existing repository


```{tikz}
%| label: Fig1c
%| engine: tikz
%| echo: false
%| cache: true
%| dependson: common
%| include: false
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"
\input{resources/common.tikz}
\tikzstyle{refText} = [font={\fontspec[Scale=1.5]{InconsolataSemiCondensed-Regular}}]
\begin{tikzpicture}

\state{0,0}{color_local}{L}
\node[TARGET,fill=white] at ($(L.north) +(0,0.5cm)$) {Local Repository};

\commit{right = 0.5 cm of L}{A}{color_inactive}{}{}
\commit{right = 1cm of A}{B}{color_commit}{}{}
\draw [-,line width=3pt,draw=black!60] (A) -- (L.east);
\draw [<-,line width=3pt,draw=black!60] (A) -- (B);
\master{right = 0.5cm of B}\draw[->,line width=3pt,draw=black!60] (master) -- (B);
\HEAD{right = 0.5cm of master}\draw[->,line width=3pt,draw=black!60] (HEAD) -- (master);

\state{$(HEAD) +(3,0)$}{color_remote}{R}
\node[TARGET,fill=white] at ($(R.north) +(0,0.5cm)$) {Remote Repository};
\rcommit{right = 1cm of R}{rA}{color_inactive}{}{}
\commit{right = 1cm of rA}{rB}{color_commit}{}{}
\draw [-,line width=3pt,draw=black!60] (rA) -- (R.east);
\draw [<-,line width=3pt,draw=black!60] (rA) -- (rB);
\rmaster{right = 0.5cm of rB}\draw[->,line width=3pt,draw=black!60] (rmaster) -- (rB);
\rHEAD{right = 0.5cm of rmaster}\draw[->,line width=3pt,draw=black!60] (rHEAD) -- (rmaster);

\draw [->,line width=3pt,draw=black!60] (rB.south west) to [out=220,in=300] (B.south east);
\end{tikzpicture} 
```
```{bash}
#| label: Fig1c-conv
#| echo: false
convert -trim +repage -density 300 -resize 20% 10_git_files/figure-html/Fig1c-1.pdf 10_git_files/figure-html/Fig1c-1.png 
```

![](10_git_files/figure-html/Fig1c-1.png)

To get your own local copy of an existing repository, issue the `git
clone <repo url>` _command_ in the root of the working directory you
wish to contain the git repository. The `repo url` points to the
location of the existing repository to be cloned. This is also a **one
time operation** and should be issued in an otherwise empty directory.

The `repo url` can be located on any accessible filesytem (local or
remote). The cloning process also stores a link back to the original
location of the repository (called **origin**). This provides a
convenient way for the system to keep track of where the local
repository should exchange files.

Many git repositories are hosted on sites such as github, gitlab or
bitbucket. Within an online git repository, these sites provide url
links for cloning.

::: {.panel-tabset}

#### Terminal

```{bash}
#| label: git-clone
#| echo: true
#| eval: false
#| cache: false
#| classes: bash
#| engine: bash
git clone "url.git"
```

where `"url.git"` is the url of the hosted repository.

#### Rstudio

1. click on the `Project` selector in the top right of the Rstudio
   window (as highlighted by the red ellipse in the image below.
2. select `New Project` from the dropdown menu
3. select `Version Control` form the Create Project panel
4. select `Git` from the Create Project from Version Control panel
5. paste in the address of the repository that you want to clone,
   optionally a name for this repository (if you do not like the
   original name) and use the `Browse` button to locate a suitable
   position for this new directory.
6. Click the `Create Project` button
:::

### Initializing a repository in an existing directory

::: {.panel-tabset}

#### Terminal

This is the same as for a new directory.

```{bash}
#| label: git-create1a
#| echo: true
#| eval: false
#| cache: false
#| classes: bash
#| engine: bash
git init
```
#### Rstudio

1. click on the `Project` selector in the top right of the Rstudio
   window (as highlighted by the red ellipse in the image below.
2. select `New Project` from the dropdown menu
3. select `Existing Directory` form the Create Project panel
4. use the `Browse` button to locate the existing directory
6. Click the `Create Project` button
:::
