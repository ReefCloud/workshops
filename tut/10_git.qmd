---
title: Git and version control
author: "Murray Logan"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    toc: true
    toc-float: true
    number-sections: true
    number-depth: 3
    embed-resources: true
    code-fold: false
    code-tools: true
    code-summary: "Show the code"
execute:
  keep-md: true
crossref:
  fig-title: '**Figure**'
  fig-labels: arabic
  tbl-title: '**Table**'
  tbl-labels: arabic
engine: knitr
bibliography: resources/references.bib
output_dir: "docs"
---

```{r setup, include=FALSE,warning=FALSE, message=FALSE}
knitr::opts_chunk$set(echo = TRUE,warning=FALSE, message=FALSE, cache = TRUE, comment = "")
options(tinytex.engine = 'xelatex')
cleanRmdInput <- function(x) {
#x <- gsub("```\\{r","```markdown\n`r ''```\\{r",x)
x <- gsub("^```$","`` `",x)  # the Makefile will then change this back to ``` after pandoc
x
}
library(tidyverse)
library(pander)
FIG_PATH <- '10_git_files/figure-html/'
```

::: {.newsbox}

**Other useful tutorials or resources**

- [https://git-scm.com/book/en/v2](https://git-scm.com/book/en/v2)
- [https://www.atlassian.com/git/tutorials](https://www.atlassian.com/git/tutorials)
- [https://marklodato.github.io/visual-git-guide/index-en.html](https://marklodato.github.io/visual-git-guide/index-en.html)
- [https://git-scm.com/docs/gittutorial](https://git-scm.com/docs/gittutorial)
- [https://marklodato.github.io/visual-git-guide/index-en.html](https://marklodato.github.io/visual-git-guide/index-en.html)
- [https://try.github.io/levels/1/challenges/1](https://try.github.io/levels/1/challenges/1)
- [https://onlywei.github.io/explain-git-with-d3/](https://onlywei.github.io/explain-git-with-d3/)
- [http://git-school.github.io/visualizing-git/](http://git-school.github.io/visualizing-git/)
- [https://github.com/sensorflo/git-draw](https://github.com/sensorflo/git-draw)
:::



This tutorial will take a modular approach. The first section will
provide an overview of the basic concepts of git. The second section
will provide a quick overview of basic usage and the third and final
section will cover intermediate level usage. In an attempt to ease
understanding, the tutorial will blend together git commands and
output, schematic diagrams and commentary in an attempt to ease
understanding.

The following table surves as both a key and overview of the most
common actions and git 'verbs'.

```{cat}
#| label: common
#| echo: true
#| eval: true
#| cache: true
#| engine.opts:
#|   file: "resources/common.tikz"

\tikzstyle{TARGET} = [font={\fontspec[Scale=2]{NotoSans-Regular}}]

\tikzstyle{hashText} = [font={\fontspec[Scale=1.5]{Inconsolata}}]
\tikzstyle{commentText} = [font={\fontspec[Scale=1.0]{Inconsolata}}]
\tikzstyle{refText} = [font={\fontspec[Scale=1.5]{Inconsolata}}]

\definecolor{color_branch}{rgb}{1,0.8,0.4}
\definecolor{color_head}{HTML}{6495ED} %
\definecolor{color_HEAD}{rgb}{0.26,0.65,0.91}
\definecolor{color_commit}{rgb}{0.9,0.9,0.2}
\definecolor{color_inactive}{rgb}{0.90,0.9,0.9}
\definecolor{color_detached}{rgb}{0.90,0.9,0.9}
\definecolor{color_derivative}{rgb}{0.12,0.6,0.51}
\definecolor{color_local}{rgb}{0.9,0.9,0.2}
\definecolor{color_remote}{rgb}{1,0.55,0.15}
 
% A template for making the storage symbol
\newcommand{\state}[3]{
\draw (#1) node [draw=none,fill=#2,shape=circle,minimum width=2cm] (#3) {
\begin{tikzpicture}
\node [draw=white, fill=white,shape=cylinder,shape aspect=1.3 ,shape border rotate=90,minimum height=1.6cm,minimum width=1.5cm] at (0,0) (Cylinder) {};
\draw[draw=#2,very thick,line width=0.1cm,anchor=north west] ($(Cylinder.north west) +(-0.05cm,-0.1cm)$) arc (-180:0:0.8cm and 0.2cm); 
\draw[draw=#2,very thick,line width=0.1cm,anchor=north west] ($(Cylinder.north west) +(-0.05cm,-0.5cm)$) arc (-180:0:0.8cm and 0.2cm); 
\draw[draw=#2,very thick,line width=0.1cm,anchor=north west] ($(Cylinder.north west) +(-0.05cm,-0.9cm)$) arc (-180:0:0.8cm and 0.2cm); 
\end{tikzpicture}
};
}

\newcommand{\commit}[5]{
\node [#1,inner sep=0,outer sep=0] (#2) {
\begin{tikzpicture}[#1]
\draw [#1] node [draw=black!40!#3,fill=#3,shape=circle,minimum width=1.0cm,line width=3pt] (x) {};
%\node [below,hashText] at (x.south) {#4};
\end{tikzpicture}
};
\ifx\notempty#4\empty
\node [below,hashText, minimum height = 0] at (#2.south) {#4};
\fi
\ifx\notempty#5\empty
\node [below,commentText,text=gray, minimum height = 0] at ($(#2.south) +(0,-0.5)$) {#5};
\fi
}

\newcommand{\rcommit}[5]{
\node [#1,inner sep=0,outer sep=0] (#2) {
\begin{tikzpicture}[#1]
\draw [#1] node [draw=black!40!#3,fill=#3,shape=rectangle,minimum width=1.0cm,minimum height=1.0cm,line width=3pt] (x) {};
%\node [below,hashText] at (x.south) {#4};
\end{tikzpicture}
};
\node [below,hashText] at (#2.south) {#4};
\node [below,commentText,text=gray] at ($(#2.south) +(0,-0.5)$) {#5};
}

\newcommand{\master}[1] {
\node [#1,rectangle,fill=color_branch,draw=black!20!color_branch,line width=2pt,refText,minimum height=0.8cm] (master) {main};
}
\newcommand{\rmaster}[1] {
\node [#1,rectangle,fill=color_branch,draw=black!20!color_branch,line width=2pt,refText,minimum height=0.8cm] (rmaster) {origin/main};
}
\newcommand{\branch}[2] {
\node [#1,rectangle,fill=color_branch,draw=black!20!color_branch,line width=2pt,refText,minimum height=0.8cm] (#2) {#2};
}

\newcommand{\HEAD}[1] {
\node [#1,rectangle,fill=color_HEAD,draw=black!20!color_HEAD,line width=2pt,refText,minimum height=0.8cm] (HEAD) {HEAD};
}
\newcommand{\rHEAD}[1] {
\node [#1,rectangle,fill=color_HEAD,draw=black!20!color_HEAD,line width=2pt,refText,minimum height=0.8cm] (rHEAD) {origin/HEAD};
}
```

```{tikz}
%| label: Fig0
%| engine: tikz
%| echo: false
%| cache: true
%| include: false
%| dependson: common
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"
\input{resources/common.tikz}
\begin{tikzpicture}%[every node/.style={inner sep=0,outer sep=0, minimum height = 0}]
\commit{}{A}{white}{}{}
\draw [-,line width=3pt,draw=black!60] (A) -- ++(-1,0);
\end{tikzpicture}
```
```{bash}
#| label: Fig0-conv
#| warning: false
#| message: false
#| include: false
#| echo: false
convert -trim +repage -density 300 -resize 20% 10_git_files/figure-html/Fig0-1.pdf 10_git_files/figure-html/Fig0-1.png 
```

```{tikz}
%| label: Fig1
%| engine: tikz
%| echo: false
%| cache: true
%| include: false
%| dependson: common
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"
\input{resources/common.tikz}
\begin{tikzpicture}[every node/.style={inner sep=0,outer sep=0, minimum height = 0}]
\commit{}{A}{color_commit!30}{}{}
\draw [-,line width=3pt,draw=black!60] (A) -- ++(-1,0);
\end{tikzpicture}
```
```{bash}
#| label: Fig1-conv
#| warning: false
#| message: false
#| include: false
#| echo: false
convert -trim +repage -density 300 -resize 20% 10_git_files/figure-html/Fig1-1.pdf 10_git_files/figure-html/Fig1-1.png
```


```{tikz}
%| label: Fig2
%| engine: tikz
%| echo: false
%| cache: true
%| include: false
%| dependson: common
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"
\input{resources/common.tikz}
\begin{tikzpicture}[every node/.style={inner sep=0,outer sep=0, minimum height = 0}]
\commit{}{A}{color_commit}{}{}
\draw [-,line width=3pt,draw=black!60] (A) -- ++(-1,0);
\end{tikzpicture}
```
```{bash}
#| label: Fig2-conv
#| warning: false
#| message: false
#| include: false
#| echo: false
convert -trim +repage -density 300 -resize 20% 10_git_files/figure-html/Fig2-1.pdf 10_git_files/figure-html/Fig2-1.png
```

```{tikz}
%| label: Fig3a
%| engine: tikz
%| echo: false
%| cache: true
%| include: false
%| dependson: common
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"
\input{resources/common.tikz}
\begin{tikzpicture}%[every node/.style={inner sep=0,outer sep=0, minimum height = 0}]
\commit{}{A}{color_inactive}{}{}
\commit{right = 1cm of A}{B}{color_commit}{}{}
\commit{right = 1cm of B}{C}{color_detached}{}{}
\draw [-,line width=3pt,draw=black!60] (A) -- ++(-1,0);
\draw [-,line width=3pt,draw=black!60] (B) -- (A);
\end{tikzpicture}
```
```{bash}
#| label: Fig3a-conv
#| warning: false
#| message: false
#| include: false
#| echo: false
convert -trim +repage -density 300 -resize 20% 10_git_files/figure-html/Fig3a-1.pdf 10_git_files/figure-html/Fig3a-1.png  
```

```{tikz}
%| label: Fig3b
%| engine: tikz
%| echo: false
%| cache: true
%| include: false
%| dependson: common
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"
\input{resources/common.tikz}
\begin{tikzpicture}%[every node/.style={inner sep=0,outer sep=0, minimum height = 0}]
\commit{}{A}{color_inactive}{}{}
\commit{right = 1cm of A}{B}{color_commit}{}{}
\commit{right = 1cm of B}{C}{color_detached!30}{}{}
\draw [-,line width=3pt,draw=black!60] (A) -- ++(-1,0);
\draw [-,line width=3pt,draw=black!60] (B) -- (A);
\draw [->,dashed,line width=3pt,draw=black!60] (C) -- (B);
\end{tikzpicture}
```
```{bash}
#| label: Fig3b-conv
#| warning: false
#| message: false
#| include: false
#| echo: false
convert -trim +repage -density 300 -resize 20% 10_git_files/figure-html/Fig3b-1.pdf 10_git_files/figure-html/Fig3b-1.png 
```

```{tikz}
%| label: Fig3c
%| engine: tikz
%| echo: false
%| cache: true
%| include: false
%| dependson: common
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"
\input{resources/common.tikz}
\begin{tikzpicture}%[every node/.style={inner sep=0,outer sep=0, minimum height = 0}]
\commit{}{A}{color_inactive}{}{}
\commit{right = 1cm of A}{B}{color_inactive}{}{}
\commit{right = 1cm of B}{C}{color_commit}{}{}
\draw [-,line width=3pt,draw=black!60] (A) -- ++(-1,0);
\draw [-,line width=3pt,draw=black!60] (B) -- (A);
\draw [-,line width=3pt,draw=black!60] (C) -- (B);
\draw [->,line width=3pt,draw=black!60] (A) to[out=45] (C);

\end{tikzpicture}
```
```{bash}
#| label: Fig3c-conv
#| warning: false
#| message: false
#| include: false
#| echo: false
convert -trim +repage -density 300 -resize 20% 10_git_files/figure-html/Fig3c-1.pdf 10_git_files/figure-html/Fig3c-1.png 
```

```{tikz}
%| label: Fig4
%| engine: tikz
%| echo: false
%| cache: true
%| include: false
%| dependson: common
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"
\input{resources/common.tikz}

\tikzstyle{refText} = [font={\fontspec[Scale=1.5]{InconsolataSemiCondensed-Regular}}]
\begin{tikzpicture}%[every node/.style={inner sep=0,outer sep=0, minimum height = 0}]
\commit{}{A}{color_inactive}{}{}
\commit{right = 1cm of A}{B}{color_inactive}{}{}
\commit{right = 1cm of B}{C}{color_commit}{}{}
\draw [-,line width=3pt,draw=black!60] (A) -- ++(-1,0);
\draw [-,line width=3pt,draw=black!60] (B) -- (A);
\draw [-,line width=3pt,draw=black!60] (C) -- (B);
\commit{above = 0.5cm of B}{D}{color_branch}{}{}
\draw [-,line width=3pt,draw=black!60] (A.east) to[out=0,in=180] (D);
%\node[right = 0.5cm of C, rectangle, refText] (master) {main};
\master{right = 0.5cm of C}
\draw[->,line width=3pt,draw=black!60] (master) -- (C);
\branch{right = 0.5cm of D}{Feature} 
\draw[->,line width=3pt,draw=black!60] (Feature) -- (D);
\end{tikzpicture}
```
```{bash}
#| label: Fig4-conv
#| warning: false
#| message: false
#| include: false
#| echo: false
convert -trim +repage -density 300 -resize 20% 10_git_files/figure-html/Fig4-1.pdf 10_git_files/figure-html/Fig4-1.png 
```


```{tikz}
%| label: Fig5
%| engine: tikz
%| echo: false
%| cache: true
%| include: false
%| dependson: common
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"
\input{resources/common.tikz}
\tikzstyle{refText} = [font={\fontspec[Scale=1.5]{InconsolataSemiCondensed-Regular}}]
\begin{tikzpicture}%[every node/.style={inner sep=0,outer sep=0, minimum height = 0}]
\commit{}{A}{color_inactive}{}{}
\commit{right = 1cm of A}{B}{color_inactive}{}{}
\commit{right = 1cm of B}{C}{color_commit}{}{}
\draw [-,line width=3pt,draw=black!60] (A) -- ++(-1,0);
\draw [-,line width=3pt,draw=black!60] (B) -- (A);
\draw [-,line width=3pt,draw=black!60] (C) -- (B);
\commit{above = 0.5cm of B}{D}{color_inactive}{}{}
\draw [-,line width=3pt,draw=black!60] (A.east) to[out=0,in=180] (D);
\master{right = 0.5cm of C}\draw[->,line width=3pt,draw=black!60] (master) -- (C);
\branch{right = 0.5cm of D}{Feature}\draw[->,line width=3pt,draw=black!60] (Feature) -- (D);
\draw [-,line width=3pt,draw=black!60] (D.east) to[out=0,in=180] (C);
\end{tikzpicture}
```

```{bash}
#| label: Fig5-conv
#| echo: false
convert -trim +repage -density 300 -resize 20% 10_git_files/figure-html/Fig5-1.pdf 10_git_files/figure-html/Fig5-1.png   
```

```{tikz}
%| label: Fig6a
%| engine: tikz
%| echo: false
%| cache: true
%| include: false
%| dependson: common
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"
\input{resources/common.tikz}
\tikzstyle{refText} = [font={\fontspec[Scale=1.5]{InconsolataSemiCondensed-Regular}}]
\begin{tikzpicture}%[every node/.style={inner sep=0,outer sep=0, minimum height = 0}]
\commit{}{A}{color_inactive}{}{}
\commit{right = 1cm of A}{B}{color_detached!30}{}{}
\commit{right = 1cm of B}{C}{color_commit}{}{}
\draw [-,line width=3pt,draw=black!60] (A) -- ++(-1,0);
\draw [-,line width=3pt,draw=black!60] (C) -- (A);
\end{tikzpicture}
```

```{bash}
#| label: Fig6a-conv
#| echo: false
convert -trim +repage -density 300 -resize 20% 10_git_files/figure-html/Fig6a-1.pdf 10_git_files/figure-html/Fig6a-1.png  
```

```{tikz}
%| label: Fig5b
%| engine: tikz
%| echo: false
%| cache: true
%| include: false
%| dependson: common
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"
\input{resources/common.tikz}
\tikzstyle{refText} = [font={\fontspec[Scale=1.5]{InconsolataSemiCondensed-Regular}}]
\begin{tikzpicture}%[every node/.style={inner sep=0,outer sep=0, minimum height = 0}]
\commit{}{A}{color_commit}{}{}
\draw [-,line width=3pt,draw=black!60] (A) -- ++(-1,0);
%\commit{right = 1cm of A}{B}{color_commit}{}{}
%\draw [-,line width=3pt,draw=black!60] (B) -- (A);
\master{right = 0.5cm of A}\draw[->,line width=3pt,draw=black!60] (master) -- (A);

\rcommit{below = 1cm of A}{rA}{color_inactive}{}{}
\draw [-,line width=3pt,draw=black!60] (rA) -- ++(-1,0);
\rcommit{right = 1cm of rA}{rB}{color_commit}{}{}
\draw [-,line width=3pt,draw=black!60] (rB) -- (rA);
\rmaster{right = 0.5cm of rB}\draw[->,line width=3pt,draw=black!60] (rmaster) -- (rB);

\draw [<-,line width=3pt, draw=black!60, dashed] (A) -- (rB);
\end{tikzpicture}
```
```{bash}
#| label: Fig5b-conv
#| echo: false
convert -trim +repage -density 300 -resize 20% 10_git_files/figure-html/Fig5b-1.pdf 10_git_files/figure-html/Fig5b-1.png 
```

```{tikz}
%| label: Fig5a
%| engine: tikz
%| echo: false
%| cache: true
%| include: false
%| dependson: common
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"
\input{resources/common.tikz}
\tikzstyle{refText} = [font={\fontspec[Scale=1.5]{InconsolataSemiCondensed-Regular}}]
\begin{tikzpicture}%[every node/.style={inner sep=0,outer sep=0, minimum height = 0}]
\commit{}{A}{color_inactive}{}{}
\draw [-,line width=3pt,draw=black!60] (A) -- ++(-1,0);
\commit{right = 1cm of A}{B}{color_commit}{}{}
\draw [-,line width=3pt,draw=black!60] (B) -- (A);
\master{right = 0.5cm of B}\draw[->,line width=3pt,draw=black!60] (master) -- (B);

\rcommit{below = 1cm of A}{rA}{color_commit}{}{}
\draw [-,line width=3pt,draw=black!60] (rA) -- ++(-1,0);
\rmaster{right = 0.5cm of rA}\draw[->,line width=3pt,draw=black!60] (rmaster) -- (rA);

\draw [->,line width=3pt, draw=black!60, dashed] (B) -- (rA);
\end{tikzpicture}
```
```{bash}
#| label: Fig5a-conv
#| echo: false
convert -trim +repage -density 300 -resize 20% 10_git_files/figure-html/Fig5a-1.pdf 10_git_files/figure-html/Fig5a-1.png
```


<table class= "table-sm table-borderless" style='border-spacing:20px;'>
<tr>
<td>
<a href="#Initialize">Initialize git</a><br>
![](10_git_files/figure-html/Fig0-1.png)
</td>
<td width='40%'>
`git init`
</td>
<td>
Establish a git repository (within the current path if no path provided)
</td>
</tr>
<tr>
<td>
<a href="#Commit">Staging</a><br> 
    ![](10_git_files/figure-html/Fig1-1.png)
</td>
<td>
`git add <file>`<br>
where `file` is one or more files to stage
</td>
<td>
Staging is indicating which files and their states are to be included in the next commit.
</td>
</tr>

<tr>
<td>
<a href="#Commit">Committing</a><br>
    ![](10_git_files/figure-html/Fig2-1.png)
</td>
<td>
`git commit -m "<Commit message>"`<br>
where `<Commit message>` is a message to accompany the commit
</td>
<td>
Commiting generates a 'snapshot' of the file system.
</td>
</tr>
<tr>
  <td>
    <a href="#checkout">Checkout</a><br>
    ![](10_git_files/figure-html/Fig3a-1.png)
  </td>
  <td>
    `git checkout "<commit>"`<br>
    where `<commit>` is a reference to a commit to be reviewed
  </td>
  <td>
    Explore the state associated with a specific commit
  </td>
</tr>
<tr>
  <td>
    <a href="#reset">Reset</a><br>
    <!-- <img src="10_git_files/figure-html/Fig3b-1.png" class="" alt=""  style="transform: scale(0.2);"/> -->
    ![](10_git_files/figure-html/Fig3b-1.png)
  </td>
  <td>
    `git reset --hard "<commit>"`<br>
    where `<commit>` is a reference to a commit
  </td>
  <td>
    Return to a previous state, effectively erasing subsequent commits..
  </td>
</tr>
<tr>
  <td>
    <a href="#revert">Revert</a><br>
    ![](10_git_files/figure-html/Fig3c-1.png)
  </td>
  <td>
    `git revert "<commit>"`<br>
    where `<commit>` is a reference to a commit that should be nullified (inverted)
  </td>
  <td>
    Generate a new commit that reverses the changes introduced by a commit thereby effectively rolling back to a previous state (the one prior to the nominated commit) whilst still maintaining full commit history.
  </td>
</tr>

<tr>
  <td>
    <a href="#Branching">Branching</a><br>
    ![](10_git_files/figure-html/Fig4-1.png)
  </td>
  <td>
    `git branch <name>`<br>
    `git checkout <name>`<br>
    where `<name>` is a reference to a branch name (e.g. 'Feature')
  </td>
  <td>
    Take edits in the project in a new direction to allow for modifications that will
    not affect the main (master) branch.
  </td>
</tr>

<tr>
  <td>
    <a href="#Merging">Merging</a><br>
    ![](10_git_files/figure-html/Fig5-1.png)
  </td>
   <td>
     `git checkout master`<br>
     `git branch <name>`<br>
     where `<name>` is a reference to a branch name (e.g. 'Feature') that
     is to be merged back into `master`.
  </td>
  <td>
    Incorporate changes in a branch into another branch (typically `master`).
  </td>
</tr>

<tr>
  <td>
    <a href="#rebase">Rebasing</a><br>
    ![](10_git_files/figure-html/Fig6a-1.png)
  </td>
   <td>
     `git rebase -i HEAD~<number>`<br>
     where `<number>` is the number of previous commits to
     squash together with head.
  </td>
  <td>
    Combine multiple commits together into a single larger commit.
  </td>
</tr>

<tr>
  <td>
    <a href="#Pulling">Pulling</a><br>
    ![](10_git_files/figure-html/Fig5b-1.png)
  </td>
   <td>
     `git pull -u <remote> <branch>`<br>
     where `<remote>` is the name of the remote (typically `origin`)
     and `<branch>` is the branch to sync with remote (typically `master`).
  </td>
  <td>
    Pull changes from a branch of a remote repository.
  </td>
</tr>

<tr>
  <td>
    <a href="#Pushing">Pushing</a><br>
    ![](10_git_files/figure-html/Fig5a-1.png)
  </td>
   <td>
     `git push -u <remote> <branch>`<br>
     where `<remote>` is the name of the remote (typically `origin`)
     and `<branch>` is the branch to sync with remote (typically `master`).
  </td>
  <td>
    Push changes up to a branch of a remote repository.
  </td>
</tr>
</table>


# Context


Git is a distributed versioning system. This means that the complete
contents and history of a repository (in simplistic terms a repository
is a collection of files and associated metadata) can be completely
duplicated across multiple locations.

No doubt you have previously been working on a file (could be a
document, spreadsheet, script or any other type of file) and got to a
point where you have thought that you are starting to make edits that
substantially change the file and therefore have considered saving the
new file with a new name that indicates that it is a new version.

```{tikz}
%| label: Fig10
%| engine: tikz
%| echo: false
%| cache: true
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"

\tikzstyle{CODE} = [font={\fontspec[Scale=2]{InconsolataSemiCondensed-Regular}}]
\tikzstyle{fileText} = [font={\fontspec[Scale=1]{InconsolataSemiCondensed-Regular}}] 

\definecolor{color_workspace}{rgb}{0.12,0.6,0.51}
\definecolor{color_index}{rgb}{0.78,0.86,0.27}
\definecolor{color_local}{rgb}{0.9,0.9,0.2}
\definecolor{color_remote}{rgb}{1,0.55,0.15}
\definecolor{color_master}{rgb}{0.36,0.27,0.87}
\definecolor{color_head}{HTML}{6495ED} %\definecolor{color_head}{rgb}{0.26,0.65,0.91}

\newcommand{\file}[3] {
\coordinate (#3) at (#1);
\draw [anchor=top left](#1) rectangle ++(1.5,-2);
\draw [fill=color_workspace]($(#1) +(1.5,0)$) -- ++(0,-0.5) --++(-0.5,0.5) -- cycle; 
\node [anchor=north west,fileText] at ($(#1) +(0,-0.5)$) {#2};
}

\begin{tikzpicture}

\file{0,0}{\begin{minipage}{1.3cm}\textcolor{red}{- item 1}\\\textcolor{red}{- item 2}\end{minipage}}{F1}
\node [fileText] at ($(F1) + (0.75,0.3)$) {Version 1};
\node [fileText] at ($(F1) + (0.75,-2.3)$) {todo.txt};

\file{2,0}{\begin{minipage}{1.3cm}- item 1\\- item 2\\\textcolor{red}{- item 3}\end{minipage}}{F2}
\node [fileText] at ($(F2) + (0.75,0.3)$) {Version 2};
\node [fileText] at ($(F2) + (0.75,-2.3)$) {todo2.txt};

\file{4,0}{\begin{minipage}{1.3cm}- item 1\\- item 2\\- item 3\\\textcolor{red}{- item 4}\end{minipage}}{F3}
\node [fileText] at ($(F3) + (0.75,0.3)$) {Version 3};
\node [fileText] at ($(F3) + (0.75,-2.3)$) {todo3.txt};

\file{6,0}{\begin{minipage}{1.3cm}- item 1\\- item 2\\\textcolor{blue}{- item 4}\end{minipage}}{F4}
\node [fileText] at ($(F4) + (0.75,0.3)$) {Version 4};
\node [fileText] at ($(F4) + (0.75,-2.3)$) {todo4.txt};

\node [fileText] at ($(F4) +(3.5,-1)$) {\begin{minipage}{2.5cm}An example of a poor, adhoc versioning system.\end{minipage}};)

\end{tikzpicture}
```

In the above diagram, new content is indicated in red and
modifications in blue.

Whist this approach is ok, it is fairly limited and unsophisticated
approach to versioning (keeping multiple versions of a file). Firstly,
if you edit this file over many sessions and each time save with a
different name, it becomes very difficult to either keep tract of what
changes are associated with each version of the file, or the order in
which the changes were made. This is massively compounded if a project
comprises multiple files or has multiple authors.

Instead, imagine a system in which you could take a snapshot of state
of your files and also provide a description outlining what changes
you have made. Now imagine that the system was able to store and keep
track of a succession of such versions in such a way that allows you
to roll back to any previous versions of the files and exchange the
entire history of changes with others collaborators - that is the
purpose of git.

```{tikz}
%| label: Fig11
%| engine: tikz
%| echo: false
%| cache: true
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"

\tikzstyle{CODE} = [font={\fontspec[Scale=2]{InconsolataSemiCondensed-Regular}}]
\tikzstyle{fileText} = [font={\fontspec[Scale=1]{InconsolataSemiCondensed-Regular}}] 

\definecolor{color_workspace}{rgb}{0.12,0.6,0.51}
\definecolor{color_index}{rgb}{0.78,0.86,0.27}
\definecolor{color_local}{rgb}{0.9,0.9,0.2}
\definecolor{color_remote}{rgb}{1,0.55,0.15}
\definecolor{color_master}{rgb}{0.36,0.27,0.87}
\definecolor{color_head}{HTML}{6495ED} %\definecolor{color_head}{rgb}{0.26,0.65,0.91}

\newcommand{\file}[3] {
\coordinate (#3) at (#1);
\draw [anchor=top left](#1) rectangle ++(1.5,-2);
\draw [fill=color_workspace]($(#1) +(1.5,0)$) -- ++(0,-0.5) --++(-0.5,0.5) -- cycle; 
\node [anchor=north west,fileText] at ($(#1) +(0,-0.5)$) {#2};
}

\begin{tikzpicture}
%Version 1
\file{0,0}{\begin{minipage}{1.3cm}\textcolor{red}{- item 1}\\\textcolor{red}{- item 2}\end{minipage}}{F1}
\node [fileText] at ($(F1) + (0.75,-2.3)$) {todo.txt};

\file{0,-3}{\begin{minipage}{1.3cm}\textcolor{red}{Title}\\[1em]\textcolor{red}{content}\end{minipage}}{F1a}
\node [fileText] at ($(F1a) + (0.75,-2.3)$) {fileA.doc};


\node [fileText] at ($(F1) + (0.2,0.5)$) (V1) {Version 1};
\draw (V1.200) -- (V1.200 |- F1a);
\draw (V1.200 |- F1) -- (F1);
\draw (V1.200 |- F1a) -- (F1a);

%Version 2
\file{3,0}{\begin{minipage}{1.3cm}- item 1\\- item 2\\\textcolor{red}{- item 3}\end{minipage}}{F2}
\node [fileText] at ($(F2) + (0.75,-2.3)$) {todo.txt};

\file{3,-3}{\begin{minipage}{1.3cm}\textcolor{black}{Title}\\[1em]\textcolor{black}{content}\end{minipage}}{F2a}
\node [fileText] at ($(F2a) + (0.75,-2.3)$) {fileA.doc};

\file{3,-6}{\begin{minipage}{1.3cm}\textcolor{red}{ID,Num}\\\textcolor{red}{1,10}\\\textcolor{red}{2,15}\end{minipage}}{F2b}
\node [fileText] at ($(F2b) + (0.75,-2.3)$) {fileB.csv};

\node [fileText] at ($(F2) + (0.2,0.5)$) (V2) {Version 2};
\draw (V2.200) -- (V2.200 |- F2b);
\draw (V2.200 |- F2) -- (F2);
\draw (V2.200 |- F2a) -- (F2a);
\draw (V2.200 |- F2b) -- (F2b);

%Version 3
\file{6,0}{\begin{minipage}{1.3cm}- item 1\\- item 2\\- item 3\\\textcolor{red}{- item 4}\end{minipage}}{F3}
\node [fileText] at ($(F3) + (0.75,-2.3)$) {todo.txt};

\file{6,-3}{\begin{minipage}{1.3cm}\textcolor{black}{Title}\\[1em]\textcolor{black}{content}\end{minipage}}{F3a}
\node [fileText] at ($(F3a) + (0.75,-2.3)$) {fileA.doc};

\file{6,-6}{\begin{minipage}{1.3cm}\textcolor{black}{ID,Num}\\\textcolor{black}{1,10}\\2,\textcolor{blue}{25}\end{minipage}}{F3b}
\node [fileText] at ($(F3b) + (0.75,-2.3)$) {fileB.csv};

\node [fileText] at ($(F3) + (0.2,0.5)$) (V3) {Version 3};
\draw (V3.200) -- (V3.200 |- F3b);
\draw (V3.200 |- F3) -- (F3);
\draw (V3.200 |- F3a) -- (F3a);
\draw (V3.200 |- F3b) -- (F3b);

\node [fileText] at ($(F3) +(4,-1)$) {\begin{minipage}{3cm}An example of a more sophisticated versioning system\end{minipage}};

\end{tikzpicture}
```

In the above diagram (which I must point out is **not actually how
git works**), you can see that we are keeping track of multiple
documents and potentially multiple changes within each document. What
constitutes a version (as in how many changes and to what files) is
completely arbitrary. Each individual edit can define a separate
version.

One of the issues with the above system is that there is a lot of
redundancy. With each new version an addition copy of the project's
entire filesystem (all its files) must be stored. In the above case,
Version 2 and 3 both contain identical copies of
`fileA.doc`. Is there a way of reducing the required size
of the snapshots by only keeping copies of those that have actually
changed? **this is what git achieves**. Git versions (or snapshots
known as _commits_) store files that have changed since the
previous and files that have not changed are only represented by links
to instances of these files within previous snapshots.

```{tikz}
%| label: Fig12
%| engine: tikz
%| echo: false
%| cache: true
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"

\tikzstyle{CODE} = [font={\fontspec[Scale=2]{InconsolataSemiCondensed-Regular}}]
\tikzstyle{fileText} = [font={\fontspec[Scale=1]{InconsolataSemiCondensed-Regular}}] 

\definecolor{color_workspace}{rgb}{0.12,0.6,0.51}
\definecolor{color_index}{rgb}{0.78,0.86,0.27}
\definecolor{color_local}{rgb}{0.9,0.9,0.2}
\definecolor{color_remote}{rgb}{1,0.55,0.15}
\definecolor{color_master}{rgb}{0.36,0.27,0.87}
\definecolor{color_head}{HTML}{6495ED} %\definecolor{color_head}{rgb}{0.26,0.65,0.91}

\newcommand{\file}[3] {
\coordinate (#3) at (#1);
\draw [anchor=top left](#1) rectangle ++(1.5,-2);
\draw [fill=color_workspace]($(#1) +(1.5,0)$) -- ++(0,-0.5) --++(-0.5,0.5) -- cycle; 
\node [anchor=north west,fileText] at ($(#1) +(0,-0.5)$) {#2};
}

\begin{tikzpicture}
%Version 1
\file{0,0}{\begin{minipage}{1.3cm}\textcolor{red}{- item 1}\\\textcolor{red}{- item 2}\end{minipage}}{F1}
\node [fileText] at ($(F1) + (0.75,-2.3)$) {todo.txt};

\file{0,-3}{\begin{minipage}{1.3cm}\textcolor{red}{Title}\\[1em]\textcolor{red}{content}\end{minipage}}{F1a}
\node [fileText] at ($(F1a) + (0.75,-2.3)$) {fileA.doc};


\node [fileText] at ($(F1) + (0.2,0.5)$) (V1) {Version 1};
\draw (V1.200) -- (V1.200 |- F1a);
\draw (V1.200 |- F1) -- (F1);
\draw (V1.200 |- F1a) -- (F1a);

%Version 2
\file{3,0}{\begin{minipage}{1.3cm}- item 1\\- item 2\\\textcolor{red}{- item 3}\end{minipage}}{F2}
\node [fileText] at ($(F2) + (0.75,-2.3)$) {todo.txt};

\file{3,-3}{\begin{minipage}{1.3cm}\textcolor{black}{Title}\\[1em]\textcolor{black}{content}\end{minipage}}{F2a}
\node [fileText] at ($(F2a) + (0.75,-2.3)$) {fileA.doc};

\file{3,-6}{\begin{minipage}{1.3cm}\textcolor{red}{ID,Num}\\\textcolor{red}{1,10}\\\textcolor{red}{2,15}\end{minipage}}{F2b}
\node [fileText] at ($(F2b) + (0.75,-2.3)$) {fileB.csv};

\node [fileText] at ($(F2) + (0.2,0.5)$) (V2) {Version 2};
\draw (V2.200) -- (V2.200 |- F2b);
\draw (V2.200 |- F2) -- (F2);
\draw (V2.200 |- F2a) -- (F2a);
\draw (V2.200 |- F2b) -- (F2b);

%Version 3
\file{6,0}{\begin{minipage}{1.3cm}- item 1\\- item 2\\- item 3\\\textcolor{red}{- item 4}\end{minipage}}{F3}
\node [fileText] at ($(F3) + (0.75,-2.3)$) {todo.txt};

%\file{6,-3}{\begin{minipage}{1.3cm}\textcolor{black}{Title}\\[1em]\textcolor{black}{content}\end{minipage}}{F3a}
\node [anchor=west,text=green!50!black!50] at (6,-3) (F3a) {\#\#\#\#\#\#}; 
\node [fileText] at ($(F3 |- F3a) + (0.75,-0.5)$) {fileA.doc};
\draw[->,very thick,color=green!50!black!50] (F3a) -- ($(F2a) +(1.6,-0.5)$);


\file{6,-6}{\begin{minipage}{1.3cm}\textcolor{black}{ID,Num}\\\textcolor{black}{1,10}\\2,\textcolor{blue}{25}\end{minipage}}{F3b}
\node [fileText] at ($(F3b) + (0.75,-2.3)$) {fileB.csv};

\node [fileText] at ($(F3) + (0.2,0.5)$) (V3) {Version 3};
\draw (V3.200) -- (V3.200 |- F3b);
\draw (V3.200 |- F3) -- (F3);
\draw (V3.200 |- F3a) -- (F3a);
\draw (V3.200 |- F3b) -- (F3b);

\node [fileText] at ($(F3) +(4,-1)$) {\begin{minipage}{3cm}An example of a more sophisticated, yet efficient versioning system\end{minipage}};

\end{tikzpicture}
```

Now consider the following:

- You might have noticed that a new version can comprise multiple
  changes across multiple files. However, what if we have made
  numerous changes to numerous files over the course of an editing
  session (perhaps simultaneously addressing multiple different
  editing suggestions at a time), yet we did not want to lump all of
  these changes together into a single save point (snapshot). For
  example, the multiple changes might constitute addressing three
  independent issues, so although all edits were made simultaneously,
  we wish to record and describe the changes in three separate
  snapshots.

 - What if this project had multiple contributors some of whom are
   working on new components of the project and some whom are working
   simultaneously on the same set of files? How can the system ensure
   that all contributors are in sync with each other and that new
   components are only introduced to the project proper once they are
   stable and agreed upon?

- What if there are files present within our project that we do not
  wish to keep track of. These files could be log files, compilation
  intermediates etc.

- Given that projects can comprise many files (some of which can be
  large), is it possible to store compressed files so as to reduce the
  storage and bandwidth burden?
		 
# Overview of git

The above discussion provides context for understanding how git works.
Within git, files can exist in one of four states:

- **untracked** - these are files within the directory tree that are
  not to be included in the repository (not part of any snapshot)
- **modified** - these are files that have changed since the last
  snapshot
- **staged** - these are files that are nominated to be part of the
  next snapshot
- **committed** - these are files that are represented in a stored
  snapshot (called a _commit_). One a snapshot is committed, it is a
  permanent part of the repositories history

Since untracked files are not part of a repository, we will ignore
these for now.

Conceptually, there are three main sections of a repository:

- **Working directory** - (or **Workspace**) is the obvious tree (set
  of files and folders) that is present on disc and comprises the
  actual files that you directly create, edit etc.
- **Staging area** - (or **index**) is a hidden file that contains
  metadata about the files to be included in the next snapshot
  (commit)
- **Repository** - the snapshots (commits). The commits are themselves
  just additional metadata pointing to a particular snapshot.

A superficial representation of some aspects of the git version
control system follows. Here, the physical file tree in the
_workspace_ can be added to the _staging area_ before this snapshot
can be committed to the _local repository_.

After we add the two files (`file 1` and `file 2`), both files will be
considered in an _untracked_ state. Adding the files to the _staging
area_ changes their state to _staged_. Finally when we commit, the
files are in a _committed_ state.

```{tikz}
%| label: Fig13
%| engine: tikz
%| echo: false
%| cache: true
%| class: tikz
%| engine-opts:
%|   template: "resources/tikz-minimal.tex"

\usetikzlibrary{shapes,arrows,shadows,positioning,mindmap,backgrounds,decorations, calc,fit, decorations.pathreplacing,decorations.pathmorphing, shadings,shapes.geometric,patterns} 
\usetikzlibrary{arrows.meta}
\tikzstyle{TARGET} = [font={\fontspec[Scale=2]{NotoSans-Regular}}] 
\tikzstyle{CODE} = [font={\fontspec[Scale=2]{InconsolataSemiCondensed-Regular}}]
\tikzstyle{TREE} = [font={\fontspec[Scale=1.5]{InconsolataSemiCondensed-Regular}}] 
\tikzstyle{fileText} = [font={\fontspec[Scale=1]{InconsolataSemiCondensed-Regular}}] 

\definecolor{color_workspace}{rgb}{0.12,0.6,0.51}
\definecolor{color_index}{rgb}{0.78,0.86,0.27}
\definecolor{color_local}{rgb}{0.9,0.9,0.2}
\definecolor{color_remote}{rgb}{1,0.55,0.15}
\definecolor{color_master}{rgb}{0.36,0.27,0.87}
\definecolor{color_head}{HTML}{6495ED} %\definecolor{color_head}{rgb}{0.26,0.65,0.91}

% A template for making the storage symbol
\newcommand{\state}[3]{
\draw (#1) node [draw=none,fill=#2,shape=circle,minimum width=2cm] (#3) {
\begin{tikzpicture}
\node [draw=white, fill=white,shape=cylinder,shape aspect=1.3 ,shape border rotate=90,minimum height=1.6cm,minimum width=1.5cm] at (0,0) (Cylinder) {};
\draw[draw=#2,very thick,line width=0.1cm,anchor=north west] ($(Cylinder.north west) +(-0.05cm,-0.1cm)$) arc (-180:0:0.8cm and 0.2cm); 
\draw[draw=#2,very thick,line width=0.1cm,anchor=north west] ($(Cylinder.north west) +(-0.05cm,-0.5cm)$) arc (-180:0:0.8cm and 0.2cm); 
\draw[draw=#2,very thick,line width=0.1cm,anchor=north west] ($(Cylinder.north west) +(-0.05cm,-0.9cm)$) arc (-180:0:0.8cm and 0.2cm); 
\end{tikzpicture}
};
}

% Define dirtree
\makeatletter
\newcount\dirtree@lvl
\newcount\dirtree@plvl
\newcount\dirtree@clvl
\def\dirtree@growth{%
\ifnum\tikznumberofcurrentchild=1\relax
\global\advance\dirtree@plvl by 1
\expandafter\xdef\csname dirtree@p@\the\dirtree@plvl\endcsname{\the\dirtree@lvl}
\fi
\global\advance\dirtree@lvl by 1\relax
\dirtree@clvl=\dirtree@lvl
\advance\dirtree@clvl by -\csname dirtree@p@\the\dirtree@plvl\endcsname
\pgf@xa=0.25cm\relax
\pgf@ya=-0.5cm\relax
\pgf@ya=\dirtree@clvl\pgf@ya
\pgftransformshift{\pgfqpoint{\the\pgf@xa}{\the\pgf@ya}}%
\ifnum\tikznumberofcurrentchild=\tikznumberofchildren
\global\advance\dirtree@plvl by -1
\fi
}

\tikzset{
dirtree/.style={
growth function=\dirtree@growth,
every node/.style={anchor=north},
every child node/.style={anchor=west},
edge from parent path={(\tikzparentnode\tikzparentanchor) |- (\tikzchildnode\tikzchildanchor)}
}
}
\makeatother

\newcommand{\file}[3] {
\coordinate (#3) at (#1);
\draw [anchor=top left](#1) rectangle ++(1.5,-2);
\draw [fill=color_workspace]($(#1) +(1.5,0)$) -- ++(0,-0.5) --++(-0.5,0.5) -- cycle; 
\node [anchor=north west,fileText] at ($(#1) +(0,-0.5)$) {#2};
}
 
\begin{tikzpicture}
 
\state{0,0}{color_workspace}{W}
\node[TARGET,fill=white] at ($(W.north) +(0,0.5cm)$) {Workspace};
\state{6,0}{color_index}{I}
\node[TARGET,fill=white] at ($(I.north) +(0,0.5cm)$) {Staging Area};
\state{12,0}{color_local}{L}
\node[TARGET,fill=white] at ($(L.north) +(0,0.5cm)$) {Local Repository};

\draw[{Round Cap[length=0.5em]}-Triangle Cap,very thick, line width=1cm, draw=color_index] ($(W.east) + (0.1cm,0)$) -- ($(I.west) + (-0.1cm,0)$) node[anchor=center,pos=0.5, text=black,align=center,CODE] {add};

\draw[{Round Cap[length=0.5em]}-Triangle Cap,very thick, line width=1cm, draw=color_local] ($(I.east) + (0.1cm,0)$) -- ($(L.west) + (-0.1cm,0)$) node[anchor=center,pos=0.5, text=black,align=center,CODE] {commit};

\node [anchor=north west] at ($(W) +(-1cm,-1cm)$)  (W0) {
\begin{tikzpicture}[dirtree,TREE]
\node {} 
child {node {file 2}}
child { node {file 1}};
\end{tikzpicture}
};
%\draw[decorate,decoration={brace,amplitude=5pt},very thick] ($(W0.north) + (-1cm,-1cm)$)  -- ($(W0.south) + (-1cm,0.2cm)$);
 
\node [anchor=north west] at ($(I) +(-1cm,-1cm)$)  (W0) {
\begin{tikzpicture}[dirtree,TREE,text=gray,color=gray]
\node {} 
child {node {file 2}}
child { node {file 1}};
\end{tikzpicture}
};


\node [anchor=north west] at ($(L) +(-1cm,-1cm)$)  (L0) {
\begin{tikzpicture}[dirtree,TREE]
\node {} 
child {node {file 2}}
child { node {file 1}};
\end{tikzpicture}
};
\draw[decorate,decoration={brace,amplitude=5pt},very thick] ($(L0.north) + (1.3cm,-0.4cm)$)  -- ($(L0.south) + (1.3cm,0.2cm)$);
\node [TREE,anchor=west] at ($(L0) +(1.5,-0.1)$) {committed snapshot 1}; 
\end{tikzpicture}
```
